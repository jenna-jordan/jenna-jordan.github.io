<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://jennajordan.me/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jennajordan.me/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-28T01:59:15+00:00</updated><id>https://jennajordan.me/feed.xml</id><title type="html">blank</title><subtitle>I do data stuff with python + SQL. Learned to code at library school. Knitter. Dog mom. Nerdy for sci-fi/fantasy, board games, and well-wrangled data. </subtitle><entry><title type="html">Reflecting on my tenure at the City of Boston</title><link href="https://jennajordan.me/blog/cob-reflection" rel="alternate" type="text/html" title="Reflecting on my tenure at the City of Boston"/><published>2024-04-08T00:00:00+00:00</published><updated>2024-04-08T00:00:00+00:00</updated><id>https://jennajordan.me/blog/cob-reflection</id><content type="html" xml:base="https://jennajordan.me/blog/cob-reflection"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/header_bostoncityhall-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/header_bostoncityhall-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/header_bostoncityhall-1400.webp"/> <img src="/assets/img/header_bostoncityhall.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>March 1st, 2024, was my last day working as a data engineer on the City of Boston Analytics Team. For the past month or so, I’ve been taking some time to reflect, and appreciate just how much I have learned and accomplished during my 2-year tenure at City Hall. This blog post is an attempt to document my growth - and also provide an outlet for the thoughts that have been bouncing around in my brain. So while I do want to let any curious readers know what my journey was like kicking off my career as a mission-driven data engineer, I also reserve the right to meander a bit.</p> <p>While I did a couple shorter-term independent contracting gigs between earning my degree and working for the City, I consider my role as a data engineer on the City of Boston Analytics Team as my first “real” data job - first time working with a data warehouse, first time working collaboratively with other data engineers (and first time creating &amp; reviewing Pull Requests), first time creating production ETL pipelines with an orchestration platform (and maintaining workflows &amp; pipelines other people created)… all of the firsts that come with working as a part of larger data team rather than completing an entire data project by myself. And besides giving me the opportunity to kickstart my career as a data engineer, working for the City also solidified my passion for civic tech. Knowing that my daily work is directly tied to a mission of improving people’s lives is a significant motivator for me - and that will continue to shape the choices I make in my career.</p> <p>Looking back, I can divide my tenure into 2 halves:</p> <p>(1) the first year, during which I learned how to become an effective data engineer on the Analytics team - learning the tools, processes, and standard practices; and</p> <p>(2) the second year, during which I was able to implement improvements to our tools, processes, and standard practices - and ended up re-architecting our data warehouse &amp; ELT pipelines along the way.</p> <p>So, let’s meander in (mostly) chronological order.</p> <h3 id="tldr">tl;dr</h3> <p>Maybe you don’t feel like going on a journey with me at the moment, and you just want the highlights - this section is just for you.</p> <p>What I learned:</p> <ol> <li>How to work with data warehouses (ELT, workflow orchestration, flow of transformations, testing the data, etc)</li> <li>Patterns of collaboration &amp; communication with fellow engineers (e.g. PR flow &amp; etiquette, documenting work), analysts (e.g. division of responsibilities, data modeling), and stakeholders (e.g. requirements gathering, advocating for data engineering best practices)</li> <li>The formal process of process improvement - how to develop and communicate innovative projects that will improve daily processes</li> <li>How to start a dbt project from scratch and iteratively grow its architecture &amp; adoption</li> <li>How to present a fairly technical data engineering process improvement project to teammates, leadership, and a wider audience</li> </ol> <p>What I accomplished:</p> <ol> <li>Starting &amp; growing the City Analytics Exchange, a casual network &amp; meetup group of data analytics practitioners in local government</li> <li>Teaching workshops (from Software Carpentries) on core technical skills like git, SQL, and python to fellow City employees (part of a larger data culture initiative)</li> <li>Integrating dbt into the data engineering team’s tech stack, and re-organizing the data warehouse along the way</li> <li>Presenting about the dbt migration project at Coalesce 2023</li> <li>Collaborating across many teams &amp; individuals in the department to deliver the team’s first data catalog as an official product supported by the department (SSO, boston.gov URL, data governance work initiated to support continued development)</li> </ol> <p>Links to look at next:</p> <ol> <li>Blog post: <a href="/blog/analytical-data-warehouses">Analytical Data Warehouses - an introduction</a></li> <li>Project page: <a href="/projects/dbt-migration-cob">dbt Migration at City of Boston</a></li> </ol> <h2 id="the-first-year-aka-the-year-of-learning">The first year (aka the year of learning)</h2> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/boston_first_day-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/boston_first_day-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/boston_first_day-1400.webp"/> <img src="/assets/img/boston_first_day.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Selfie from my very first day at City Hall (Jan 24, 2022) </div> <p>When I came into this role, I had no prior experience working with a data warehouse, but a decent amount of experience working with databases. For me, learning to work with an analytical data warehouse was a paradigm shift - I had the core technical skills, but it felt like the conceptual foundation I had built on how to work with databases turned to sand beneath my feet.</p> <p>As a student, I had learned how to design for and query normalized transactional databases. It had become second nature for me to understand new data by putting it into 3rd Normal Form, and implementing strong constraints on a database was a given. Have messy data? Design a relational model, then clean and wrangle the data into shape using python to output normalized, tidy tables that could then be visualized and analyzed. This was all fine for independent data projects, but it meant that I didn’t even realize I would need a whole new way of conceptualizing data work once I started working on a data team with a data warehouse. The first few months were a shock to the system!</p> <p>I think there were two pivotal things that helped me adjust and reframe how to work with data in a more collaborative ecosystem: (1) taking the month-long synchronous online course “Analytics Engineering with dbt” from CoRise, taught by Emily Hawkins and Jake Hannan, and (2) staying connected with and learning from the data community online via social media. The combination of actively learning in more of a “classroom” environment, observing and absorbing data professionals talking about their work in a public online forum, and then being able to see how those learnings applied during my daily work at the City, all together had the effect of accelerating and supercharging my learning and re-orienting process. I was able to construct a new conceptual foundation for working with analytical data warehouses within a relatively short time, and then I could continue to iterate and build on that new foundation.</p> <p>I owe a lot of thanks to Emily and Jake for answering my questions and having conversations with me during the CoRise course as I was building my conceptual foundation - those conversations and the resources they pointed me to were really helpful! I took the CoRise course in February/March, less than a month after starting at the City.</p> <p>Before taking the course, all I knew was that dbt was popular in the industry and I should probably learn it. It was a very happy coincidence that I had signed up for the dbt CoRise course a while before even starting at the City - I had been hearing about dbt online but didn’t really understand what it was for. It took my brother convincing me over Thanksgiving vacation that if I wanted to work on a data analytics team I really needed to learn dbt, even if I didn’t know what exactly it was used for. So for the sake of “professional development”, I signed up for the CoRise course in hopes that I could at least learn what was even the point of this new tool everyone in the data community was so enamoured of.</p> <p>After the course, not only did I understand what dbt was, but I understood why it was so valuable when working with a data warehouse… and how it could help improve the data engineering team’s workflows. It took about a year to get to the point of even starting that journey, but the seed was planted pretty early on.</p> <p>While my knowledge about databases and data modeling has grown a lot over the past couple years, I have still held on to a few biases due to my roots in 3NF. First, I still think that the best thing you can do with messy source data is to normalize it. A normalized relational data model provides a strong and flexible foundation that can be queried and transformed into whatever shape you need it to be next. Second, primary keys are essential. Foreign keys and check constraints may be exceedingly rare in a data warehouse, but primary keys are the one contraint that will always be useful. The idea of primary keys being “unenforceable” and “just for documentation” gives me the heebie-jeebies. I understand why (performance), I just don’t like it.</p> <p>On the flip side, there are some biases I started with that I have done a complete 180 on. When I first started as a data engineer, I wanted to do everything in python. I was very comfortable with pandas, and you could do much more complicated data transformations in a python script, so I thought that python was the best choice. Now I know that SQL is king - if you can keep it in the database and do the transformation in a SQL query, don’t even think about using python. Also, there’s no need to jump straight from source data to the final dataset in one long, complicated transformation when you can also get there with a few more steps that are simpler and modular - some of those smaller transformation steps may be re-used for other purposes. Finally, there is no single correct way to format/model your data - there are many different possible ways, and the best choice is the one that will actually get used (which is pretty much never the normalized version).</p> <p>I think my overall point here is this: I was able to go from not really understanding what a data warehouse was to having a good enough understanding of them to re-architect the team’s warehouse and the ELT pipelines powering it inside of 2 years. But that learning journey was rather rocky, and the first few months were especially tough given the lack of formal training. Reflecting on that experience - both how much I had learned by doing &amp; researching on my own, and imagining how that learning process could be smoother for myself and others - was the driving motivator for me writing the <a href="/blog/analytical-data-warehouses">introduction to analytical data warehouses</a> blog post (now <a href="/blog/category/data/">turning into a series</a>). In fact, that blog post started as a page in the team’s internal documentation that I decided to generalize and expand on, in case other folks might find it useful. I spent a lot of time and brain power on truly grokking the data warehouse from scratch, and that is something that I am both proud of and hope others don’t have to go through alone (though many inevitably will).</p> <p>One final reflection on this: I realized that the reason I did not initially understand the point of dbt was because I didn’t understand data warehouses and how to work with them. dbt solves a specific problem that every team working with a data warehouse experiences, and it solves it very well, which is why it is very popular within the specific community of data practitioners who work with data warehouses. Once I understood how to work with a data warehouse (compared to a database), understanding the value proposition of dbt and how to use it was much easier. Figuring out how to use dbt within our specific data warehouse… that was something my brain started noodling on endlessly towards the end of year one.</p> <h3 id="city-analytics-exchange">City Analytics Exchange</h3> <p>I mentioned that another important part of my learning process was being connected to the larger data community online, and this perspective was one of the primary motivations behind my City Analytics Exchange initiative.</p> <p>As a member of the City of Boston Analytics Team, I didn’t just want to learn from my fellow Boston teammates - I also wanted to learn from data analytics practitioners in other city governments. Fortunately I was not alone, and other teammates also wanted to cultivate a network of city analytics professionals! We started by reaching out to former teammates who had moved on to work for other cities, who could then reach out to their new teammates. We also started with a couple of motivating topics - specific tools that we all used or initiatives we were all trying to work on (e.g. knack, open data portals).</p> <p>I created a free Slack workspace so we had a shared space to communicate, and scheduled time to (remotely) meetup with a loose agenda. We had a goal of meeting roughly once a quarter, and adding 1 new city each time we met. With an existing communication and meeting structure, it was much easier to add new folks each time we talked to other city data teams for some unrelated project - and surprise, suprise, other city analytics folks also wanted to talk to professionals doing the same kind of civic tech work! We got to share our accomplishments, work through problems, and generally collaborate, commiserate, and cross-pollinate in a casual environment of individual contributors doing hands-on-keyboard work.</p> <p>I’m happy to say that the City Analytics Exchange is still going strong, and other members have stepped up to help facilitate the community moving forward. I hope that it continues to grow and be a resource for city data workers. If you are on a city analytics team and want to join, you can reach out to <a href="https://www.linkedin.com/in/amy-hood-110479102/">Amy Hood</a> or <a href="https://www.linkedin.com/in/samfirke/">Sam Firke</a>.</p> <h3 id="the-process-of-process-improvement">The process of process improvement</h3> <p>Early in 2023 the Analytics Team collectively took the “Advanced Innovation Training” with <a href="https://brianelms.com">Brian Elms</a> from <a href="https://changeagentstraining.com">Change Agents Training</a>. We learned about techniques like process mapping &amp; identifying waste, standard work and systems of work, batching vs flow, nudging, and how to calculate the value of innovations/improvements. We teamed up and developed some innovations that we could implement for the Analytics Team (although… most of these never actually happened). Many of the techniques seemed simple or obvious, but I think in large part the specific techniques or toy improvement projects were only the delivery mechanism: the real value was in initiating and enabling a culture shift so individual contributors (rather than managers) could feel empowered to make small (or large) changes to how the team got things done (a.k.a improving processes)… and then have a framework for proposing/communicating these innovations to both teammates and leadership.</p> <p>In the 2nd half of 2023 two dedicated process improvement coaches (<a href="https://www.linkedin.com/in/kayleigh-vocca/">Kayleigh</a> and <a href="https://www.linkedin.com/in/nolan-brown-95b95017a/">Nolan</a>) joined the Analytics Team and started to build out training for Boston city workers, and my understanding of the practice was able to advance even further through conversations with them.</p> <p>The primary reason I wanted to highlight this training and what I learned from it, though, is that you could argue that the dbt migration project I kicked off in year 2 was just one very long process improvement project. I was an individual contributor, not a manager, but I was still able to propose and implement an improvement that would substantially change how the team worked with the data warehouse. I had essentially spent a year constructing an internal process map of how the data warehouse functioned, and I could identify many instances of how implementing dbt would reduce waste in that process. I could use the tools and techniques I learned in the Innovation Training course to communicate the value of spending time implementing dbt to leadership and others who weren’t familiar with the daily work and processes the data engineers and analysts followed.</p> <p>What a perfect segue into…</p> <h2 id="the-second-year-aka-the-year-of-doing">The second year (aka the year of doing)</h2> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/boston_my_desk-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/boston_my_desk-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/boston_my_desk-1400.webp"/> <img src="/assets/img/boston_my_desk.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> My desk/cubicle at City Hall, with my knitted snowman next to our "data engineering library" </div> <p>Starting around December 2022, I started to think more seriously about how the data engineering team could start to use dbt. There were three main obstacles I had to overcome: (1) I had to show that dbt would provide a real value-add and would be worth the investment of time and resources so that it could evolve beyond a personal pet project into something the entire team could work on, (2) I needed to get all of the setup figured out so it would be as easy as possible for the second (and third, etc) engineer to start contributing to the project, and (3) I had to decide whether to make dbt fit the team’s current data warehouse architecture, or whether and how to redesign the data warehouse.</p> <p>I also had a couple of theories in how to overcome these obstacles: (1) the dbt-generated docs site with its clean documentation and pretty lineage graphs would be the biggest selling point of dbt, and (2) the easiest path in getting started would be to work outside of the existing data warehouse in a small separate database using open data with a complex lineage graph. I also hadn’t yet decided on the best path for obstacle #3, and pursuing a toy example that could demonstrate the power of the docs site would buy me some time to think through possible solutions.</p> <p>Thus began a solid few months of what felt like banging my head against a wall in hopes that answers would fall out. I’m not going to lie - it was rough. It didn’t help that the open data set with a complicated lineage I had chosen, CityScore, hadn’t been maintained and was a much bigger beast than I was anticipating. It was essentially a practice run that never fully materialized - I struggled through figuring out how to set up the infrastructure needed to develop and run a dbt core project locally, and hacked away at how to refactor the CityScore pipeline into a set of dbt models. Even though I never reached my target shareable end product for that toy project, I did learn a lot along the way. It gave me time and the opportunity to clarify my thinking and approach in how to migrate our transformations to dbt in the real data warehouse.</p> <p>Along the way I decided on how to solve obstacle #3: the best approach would be to redesign the data warehouse with a new set of schemas that were designed with dbt in mind. With the dbt work isolated to an entirely new set of schemas, that new experimental work could proceed without interrupting the existing data &amp; pipelines. We would essentially be slowly duplicating our existing workflows and data, but in a different set of schemas, with all transformations and tests living in dbt, and the import and export tasks re-organized around the dbt transformations.</p> <div class="row"> <div class="col-sm md-auto"> <a href="/assets/pdf/coalesce2023_from-coast-to-coast_slides.pdf"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/cob_new_schemas-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/cob_new_schemas-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/cob_new_schemas-1400.webp"/> <img src="/assets/img/cob_new_schemas.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Slide 26" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </a> </div> </div> <div class="caption"> Slide 26 from the Coalesce talk illustrates the old and new sets of schemas </div> <blockquote class="block-tip"> <p>Note: If you just want to find the City of Boston dbt project details/links/resources (such as the above presentation), head on over to the <a href="/projects/dbt-migration-cob">project page</a>.</p> <p>If you want to hear some of the back story on how it all happened, you can keep reading this post.</p> </blockquote> <p>Redesigning the data warehouse was not a decision I could make in isolation, of course - this was a decision that would effect the entire Analytics team, as well as anybody else who was using the data warehouse. It was also a change that had to stand on its own merits - while the new set of schemas were designed with dbt in mind, simply facilitating a migration to dbt would not be a good enough argument for making such a substantial change. Fortunately, others had been feeling the pain of our existing schema organization as well, and the new set of schemas solved many of these issues: (1) isolating the source/staging layer from “production” tables &amp; views, (2) substantially fewer schemas, (3) eliminating the need to create new schemas every time a new dataset was added that didn’t fit into any of the existing schemas.</p> <p>The old set of schemas were organized along the 2 dimensions of access level (open, internal, restricted) and data owner (department, team, source system, etc). The new set of schemas preserved the access level distinction, but instead of also organizing by data owner (the reason there were so many schemas), they were organized by data processing stage (staging, development, production). The addition of a “development environment” in the data warehouse was also a huge selling point for the engineers - previously, everything was production.</p> <p>After getting approval from leadership, I presented this proposal for a new set of schemas to the team in March 2023. I wrote up a long document detailing why the old set of schemas were problematic, why the new set of schemas were organized this way, and how this would change some of our ways of working. I also created a form so that the entire team would have a chance to vote and give input on the new set of schema names - prod vs production vs mart? open_prod vs prod_open? staging vs stg vs source? Overall, the feedback was positive and many people gave their input on the new schema names. And while dbt was mentioned as a next step, the decision to adopt the new schemas was made entirely on its own merits.</p> <p>With the team’s approval and a new set of empty schemas, I could move forward with the next step: actually getting the real dbt project up and running. Fortunately, I had learned a lot during my experiments over the past few months, so I already had a rough plan of approach. The biggest hurdle would be getting the first model to successfully run - not only being able to run a dbt command on my local computer to query and create a table, but also creating a workflow in Civis that would run a dbt command within a docker container and successfully connect to the database and create that table. And the local development environment needed to be sufficiently documented and easy to setup so that other engineers could do the same thing. Getting both the development environment (VS Code + dbt power user extension, venv, environment variables + profile for database connection) and the production environment (docker container, Civis credentials + environment variables for database connection, Civis workflow) correctly set up took some trial and error, but eventually we figured it out and got it running. By May 2023 the dbt project repo, local development environment configurations, and production civis workflow were all set up and there were a few models added to serve as examples. None of this would have been possible without the support of <a href="https://www.linkedin.com/in/al-lee-675536226/">Albert Lee</a>, our AWS/Docker/all-things-infrastructure wizard.</p> <p>The next steps were to start populating the staging schemas with the most frequently used core sources (e.g. the 311 database, the permitting/licensing database, the EGIS database) and migrating over transformations that used those data sources, as well as onboarding the engineers most excited to start working on the dbt project. Going from 1 to 2+ people working on the project is always a big but important step, and was a good opportunity to work through any kinks in the process (is the documentation thorough enough? does it work on your machine?). By June 2023 there were 3 of us working on the project, and we were able to ramp up the migration process. I’m so grateful to <a href="https://www.linkedin.com/in/jenna-flanagan-23740713/">Jenna Flanagan</a> and <a href="https://www.linkedin.com/in/david-falta-2b626b86/">David Falta</a> for their strong and early belief in the dbt project (and their continued commitment to it after my departure!).</p> <p>By July most of the engineering team had been onboarded to the dbt project, and we also had a very good idea of what to focus on migrating in the near term. In addition to the new schemas and dbt migration on the data engineering side, the analysts were starting a migration project of their own - transitioning from Tableau to Power BI. The timing for this double migration worked out perfectly, and we decided that all Power BI dashboards would be built exclusively from the new production schemas (and thus the transformations being handled by dbt). Once the set of dashboards being rebuilt first were determined, the engineering team had a definite list of table dependencies to focus on migrating to dbt and the new schemas. We could also go ahead and document those future dashboards and their dependencies as exposures in the dbt project. And given that the dbt generated documentation site was the initial selling point of dbt (those lineage graphs!), we also focused on getting an internal website (hosted via AWS services) that was updated daily ready for the team to reference.</p> <p>By September we had successfully migrated all of the high priority Power BI dashboard dependencies, had a hosted dbt-generated documentation site customized with City of Boston branding, and the new set of ELT workflows (the new import workflows and the dbt build workflows) were running daily in production. Within 6 months we had a functioning (if minimal) redesigned data warehouse and dbt-centric ELT workflows… just in time.</p> <h3 id="presenting-our-work-in-public-at-coalesce">Presenting our work in public at Coalesce</h3> <p>I just sketched out the work we were able to do in 6 months, but let me go back in time to the start. In March, before actually doing any of the work but after getting the go-ahead from the team, I submitted a talk proposal to Coalesce, the yearly dbt user conference hosted by dbt Labs. When I looked for other organizations using dbt, I saw a lot of companies - startups and large corporations - but nothing from government or other public sector adjacent organizations. But I knew that there had to be some other public sector data professionals using dbt, and after reaching out to a few folks in my network I found out that the State of California’s Office of Data &amp; Innovation team was also using dbt. Not only that, but Ian Rose, a senior data engineer on the team, would be willing to join me in proposing a talk for Coalesce! I was so happy and grateful that I would not have to submit a talk alone (public speaking is scary! … and I’d never given a conference talk before!), and I knew that with more examples we could present a stronger case to other government data teams that they, too, should consider using dbt.</p> <p>We submitted the talk proposal in March, not too long after I typed “dbt init” for the official project. Coalesce was happening in October. So I knew that I had 6 months to not only get the dbt project into a reasonably presentable state, learn as much as I could on both the socio- and -technical side of managing this migration, and also figure out what exactly we wanted to say during our 30 minutes on stage. In June we learned that the talk had been accepted, and in July after announcing the talk we were able to add another cospeaker who had been working on a dbt project in the public sector, Laurie Merrell. You can imagine my relief at achieving an MVP (minimum viable project) by September! But while the technical sprint was slowing down, the social sprint was just starting. Presentations have a way of spawning more presentations (not to mention the accompanying practice presentations). So along with working on our official Coalesce talk with Ian and Laurie, I was also crafting presentations for the Analytics Team, the CIO (head of the department), and the department at large. On the one hand, I wanted to make sure everyone at my workplace would be very familiar with the material I would be presenting in public (a presentation that would also be recorded and posted on the internet), and have the chance to provide any feedback/input. On the other hand, I really needed practice presenting this material! The marathon of presentations (and their practice sessions) leading up to Coalesce definitely helped me be more prepared in San Diego.</p> <p>Attending Coalesce was one of my favorite experiences of 2023. The community of data practitioners that gathers at Coalesce is truly amazing - the online friends I had not yet met in person (including my cospeakers!) and the new friends I was able to meet through the talks and social events, the impressive speakers sharing their work, the professional support networks (Data Angels!), even the dbt Labs folks who had been providing me assistance via slack… the people are the reason why I want to go back and attend Coalesce next year (and the year after that!). I’m not going to into too much detail about my experience at Coalesce, because (1) this post is already too long and (2) I was posting my <a href="https://www.linkedin.com/posts/activity-7120931336135028736-EAZJ?utm_source=share&amp;utm_medium=member_desktop">observations</a> and <a href="https://www.linkedin.com/posts/activity-7121255992767459328-l-36?utm_source=share&amp;utm_medium=member_desktop">reflections</a> the week of on LinkedIn, but suffice to say that I was very grateful that <a href="https://youtu.be/6aX7tAfMmIM?si=gXyUBTzKA4tMaCE7">our presentation</a> was on the first day so I could devote the rest of my time to just enjoying the conference. Oh, and I also got a cool certification after passing a test within an hour of arriving at the hotel ;)</p> <div class="row"> <div class="col-sm md-auto d-flex justify-content-center"> <a href="https://credentials.getdbt.com/7c67f8f7-834f-4806-9d34-048323d1804c"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/dbt-certified-developer-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/dbt-certified-developer-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/dbt-certified-developer-1400.webp"/> <img src="/assets/img/dbt-certified-developer.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Slide 26" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </a> </div> </div> <div class="caption"> Officially certified by dbt Labs to develop dbt projects! </div> <p>Fun fact: I had an early flight and had not yet eaten before arriving at the hotel in San Diego, so after finding the exam room I grabbed an acai bowl to eat during the test (the closest place to buy food was a frozen yogurt place and acai bowls are delicious) that may be owed partial credit for me passing and becoming a certified dbt developer. The test itself is mostly a blur but I have vivid memories of that acai bowl.</p> <h3 id="productionizing-the-data-catalog">Product(ion)izing the Data Catalog</h3> <p>Delivering the <a href="/assets/pdf/dbt-lunch-learn.pdf">presentations about dbt to others in the department</a> ended up being extremely useful for the next phase of the dbt migration as well: publishing the dbt-generated documentation site as an officially supported product, with a boston.gov URL and Single Sign-On access. While the engineering team alone was sufficient to migrate the transformations and tests over to the dbt project, many more teams and leaders in the department would need to contribute their time and effort to help turn the documentation site into an officially supported product. This effort was kicked off in November, with the majority of the work allocated for the following quarter (January - March).</p> <p><a href="https://www.linkedin.com/in/ajjaramillo/">Alejandro Jimenez Jaramillo</a>, the department’s inaugural Director of Tech Governance and Policy, immediately saw the utility of an official data catalog in advancing data governance efforts. Aleja and I had worked together on data governance issues when they were a fellow in 2022, and after they rejoined the department in 2023 we were able to continue that data governance work through the data catalog. Without Aleja and others in the department, the data catalog project may have never gotten off the ground. But because of their efforts, and collaboration across many teams in the department, the first phase of the official data catalog was launched and available by my final day. Logging in to datacatalog.boston.gov before losing access to my Boston accounts was the best goodbye gift I could ask for.</p> <h3 id="iteration-is-the-root-of-progress">Iteration is the root of progress</h3> <p>The first six months of the dbt project (March - September) were devoted to getting a minimum viable project up and running, with the first set of tables needed for high priority Power BI dashboards reliably updating in the new set of schemas. The next six months (October - March) were primarily about getting the rest of the workflows (imports, transformations, tests, exports) migrated, but it was also about iteratively improving our implementation of dbt. With all engineers now comfortable with the essential dbt skills, some were able to dive deeper into specific features in order to improve our usage of them and the overall dbt project.</p> <p>When I presented about the City of Boston’s dbt project at Coalesce, I also published a skeleton version of our dbt project repository in a <a href="https://github.com/CityOfBoston/cob_analytics_dbt_skeleton_project">public repo</a>. Before my last day, I updated this repo to be in line with our implementation as of March 2024. So, you can easily <a href="https://github.com/CityOfBoston/cob_analytics_dbt_skeleton_project/compare/6efa3219e3a509692481c95687014dc373e4fe34...a1e5c015ecf22819772ace4bd899780e5c0f621d">compare</a> what changes were made over those 6 months. While this does not represent all of our improvements (so, anything that is implemented only in individual model sql/yaml files is not captured), it does capture most of them. I may write another post in the future outlining all of the key features we added that I think should be part of any dbt project (let me know if there’s any interest in that!).</p> <p>I’m so proud of the progress our team made, and by the time I left in March the migration was about 75% complete and I was fully confident that the team could continue the dbt project work and migration without me - as well as carrying forward the data catalog and data governance work. There were a few key things that I think contributed to the project’s success as a team-wide initiative, rather than just being my personal project (which would not have had a lasting impact!):</p> <ol> <li>We set aside time for a weekly dbt sync, where all of the engineers could meet and discuss the status of the migration, propose features and improvements, ask questions to improve their own understanding, and share their own learnings and discoveries. The meetings were half project management and half knowledge sharing, and I was very intentional in making sure they were a collaborative, safe, and open environment. We were all learning and developing this project together. We also traded off facilitation roles so that there was not just one person in charge of the meeting.</li> <li>We made the right things the easiest things. For example, we wanted to make sure that it would be very easy to add documentation to models at a later point - possibly by those less familiar with dbt. So, every model SQL file also had a YAML file with description fields for every column. Through a combination of the codegen dbt package, some custom macros, and bash scripts, it was as easy as specifying the access level and a model name as arguments and running a bash script to create the base YAML and SQL files. It was fast, easy, and accurate.</li> <li>I put a lot of thought into the initial design, and made sure that the database design and dbt project design worked together cohesively. And once that larger design was decided, we stuck to it. This consistency in the overall design and architecture of the project meant we could focus on the smaller implementation details, and be confident that the ground would not move beneath us as we were trying to build on it.</li> <li>We collaboratively developed a “style guide” and standards for our work in the dbt project. Much of this borrowed from the official dbt Labs recommendations (e.g. keeping the source and ref macros at the top in a “model imports” section, having 1 SQL and 1 YAML file per model), and some of it was customized for our project (e.g. using the generate_geom_column macro for all geometry transforms, and making sure every source had the custom table-level test test_table_not_empty). We held each other to these standards in PRs, and could raise any questions in the weekly syncs.</li> <li>We didn’t try to do everything at once, and perfectly for the first time. Instead, we focused on the next thing that needed to happen given the team’s goals and current priorities. That means that there are some things we had not implemented by March that many data teams might consider essential (like CI/CD checks &amp; pipelines), and others things we implemented relatively early that many teams may not consider as important (like custom styling for the dbt docs site). When we had a relatively small number of models, we didn’t focus on optimizing when those models ran. But when we had many sources and were moving more to be updated at night (and the database was overloaded during the morning run) it became important to implement the freshness selector for the nighttime and morning dbt builds. When a migration happens on top of your regular workload, you quickly learn to prioritize only what is absolutely needed next - and having a vision for the future state can help a lot with that more immediate prioritization.</li> </ol> <p>None of this is to say that our migration went perfectly smoothly - we ran into plenty of hiccups and challenges along the way. For over a week our postgres database ran out of memory and crashed every morning at about 9am (right when it was needed for dashboard refreshes). Analysts suddenly lost the permission to query tables they needed. Some models that should be part of the daily run were not included, so some tables had stale data and we didn’t catch it until a stakeholder raised the issue. We were all learning how to build the airplane as we were building the airplane as we were flying it - and because we had a talented and dedicated team of engineers we did eventually diagnose and solve these issues… and we all learned so much in the process!</p> <p>I’m so excited to see what the team does next with the dbt project. My goal/hope is that the analysts join the engineers in contributing to the dbt project repo. Maybe data owners will start contributing documentation to the data catalog. Analysts may start using dbt metrics (maybe even the semantic layer!) in pursuit of a standardized city-wide metric library. Perhaps in a few years, other data teams throughout the City will develop their own dbt projects, and a multi-project dbt mesh could be established. With the dbt project established, other tools from the modern data stack (those with open source options, of course) could be added to the data engineering team’s toolbox.</p> <p>In order for analysts and other data professionals to contribute to the dbt project, however, there are 2 key skills that they will need: SQL and git. And that leads into the final accomplishment I would like to talk about: bringing my Software Carpentries instructor experience to the City.</p> <h3 id="teaching-computational-skills-workshops-for-city-workers">Teaching computational skills workshops for City workers</h3> <p>In grad school, I got involved with the <a href="blog/about-the-carpentries">Software Carpentries</a> and became a certified instructor. I learned how to <a href="/blog/carpentries-workshops">teach core computational skills</a> (bash, git, SQL, python) to beginner learners in the context of also teaching reproducible research skills. I really liked the Carpentries teaching philsophy of live-coding, conscientious language, and getting learners to the point of using the technical skills as fast as possible (workshops average about 3-4 hours). Also, all of the lesson plans and content are open source, so technically anybody can teach a workshop using Carpentries material.</p> <p>In 2023 I got the chance to teach a couple different Carpentries workshops. When the analysts on the team started expressing interest in having their own github repo for the growing number of projects using python rather than a dashboarding BI tool, I offered to teach the <a href="https://carpentries-incubator.github.io/git-novice-branch-pr/">Carpentries workshop on git</a> with some custom content tailored for the team. This ended up being folded into a larger data culture pilot program during the summer and was opened up to other City workers as well. During the latter half of that data culture pilot, I was also able to teach some material on pandas from the <a href="https://swcarpentry.github.io/python-novice-gapminder/">Carpentries python workshop</a>.</p> <p>In December, I also decided to host a SQL workshop and opened it up to any city worker who might be interested. I knew that SQL skills were going to become more important for analysts across the city who may be expected to query the data warehouse in order to rebuild a dashboard in Power BI, and I also just really enjoy teaching the <a href="https://swcarpentry.github.io/sql-novice-survey/">Carpentries SQL workshop</a>.</p> <div class="row"> <div class="col-sm md-auto d-flex justify-content-center"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/sql_workshop_feedback-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/sql_workshop_feedback-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/sql_workshop_feedback-1400.webp"/> <img src="/assets/img/sql_workshop_feedback.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Slack message" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A positive review of my SQL workshop! </div> <p>One amazing outcome of these workshops? Another team at the city who used the Analytics team data warehouse and had specific subject matter expertise used the opportunity to upskill their analysts and started using a GitHub repo to store and collaboratively develop SQL queries to create tables/views that could build on each other. This is a significant and useful step forward from saving long, convoluted SQL in the BI tool, as well as making it much easier on the data engineering team to later incorporate these queries into the dbt project.</p> <h2 id="wrapping-up">Wrapping up</h2> <p>This post is already longer than it needs to be, so I’m not going to spend too much time wrapping up. I will just say this: during my 2+ years at the City of Boston I was able to learn a lot by doing, I accomplished a few key things that I hope will have a lasting impact, and I met some really amazing people whom I hope to stay connected with for the long haul. There are also a lot of projects I worked on that I did not talk about in this blog post - this was primarily about the internal data engineering work I did. However, the vast majority of my time was spent on projects completed for stakeholders, who came to the Analytics team for data project help. It is not really my place to talk in detail about those projects, but I will say that I had a fantastic time contributing my expertise to their work - especially those longer, more complex projects that had a direct impact on constituent lives. I look forward to seeing what all of my former colleagues accomplish in the years to come!</p> <p>~</p> <p>Did you scroll directly to the bottom just get to the conclusion, and skip right over the TL;DR? Don’t worry, here it is again:</p> <h3 id="tldr-1">tl;dr</h3> <p>Maybe you don’t feel like going on a journey with me at the moment, and you just want the highlights - this section is just for you.</p> <p>What I learned:</p> <ol> <li>How to work with data warehouses (ELT, workflow orchestration, flow of transformations, testing the data, etc)</li> <li>Patterns of collaboration &amp; communication with fellow engineers (e.g. PR flow &amp; etiquette, documenting work), analysts (e.g. division of responsibilities, data modeling), and stakeholders (e.g. requirements gathering, advocating for data engineering best practices)</li> <li>The formal process of process improvement - how to develop and communicate innovative projects that will improve daily processes</li> <li>How to start a dbt project from scratch and iteratively grow its architecture &amp; adoption</li> <li>How to present a fairly technical data engineering process improvement project to teammates, leadership, and a wider audience</li> </ol> <p>What I accomplished:</p> <ol> <li>Starting &amp; growing the City Analytics Exchange, a casual network &amp; meetup group of data analytics practitioners in local government</li> <li>Teaching workshops (from Software Carpentries) on core technical skills like git, SQL, and python to fellow City employees (part of a larger data culture initiative)</li> <li>Integrating dbt into the data engineering team’s tech stack, and re-organizing the data warehouse along the way</li> <li>Presenting about the dbt migration project at Coalesce 2023</li> <li>Collaborating across many teams &amp; individuals in the department to deliver the team’s first data catalog as an official product supported by the department (SSO, boston.gov URL, data governance work initiated to support continued development)</li> </ol> <p>Links to look at next:</p> <ol> <li>Blog post: <a href="/blog/analytical-data-warehouses">Analytical Data Warehouses - an introduction</a></li> <li>Project page: <a href="/projects/dbt-migration-cob">dbt Migration at City of Boston</a></li> </ol>]]></content><author><name></name></author><category term="life-updates"/><summary type="html"><![CDATA[what I've learned and accomplished during my 2+ years as a data engineer on the Analytics team]]></summary></entry><entry><title type="html">The Transformation Flow, Part 1 - building intuition</title><link href="https://jennajordan.me/blog/transformation-flow-building-intuition" rel="alternate" type="text/html" title="The Transformation Flow, Part 1 - building intuition"/><published>2024-01-21T00:00:00+00:00</published><updated>2024-01-21T00:00:00+00:00</updated><id>https://jennajordan.me/blog/transformation-flow-building-intuition</id><content type="html" xml:base="https://jennajordan.me/blog/transformation-flow-building-intuition"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/header_transformation_flow_1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/header_transformation_flow_1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/header_transformation_flow_1-1400.webp"/> <img src="/assets/img/header_transformation_flow_1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Many months ago I posted an <a href="/blog/analytical-data-warehouses">introductory primer to analytical data warehouses</a>, specifically targeted to folks who were familiar with data work but did not have a lot of experience working with data warehouses. In that post I made reference to a follow-up blog post that would focus more on the transformation flow within a data warehouse:</p> <blockquote> <p>There may be many, many downstream transformations for a particular data source, and the structure of these can vary widely. There are many different design philosophies around this area of the data warehouse, but I will leave that for another post. Suffice to say, a large portion of the “thinking” work in a data warehouse is in writing these downstream transforms.</p> </blockquote> <p>Well, this is part 1 of that promised follow-up post (finally!). There is so much to say about the transformation flow that I’ve had to break it up into 3 posts: Part 1 will attempt to demonstrate that you are likely already familiar with the transformation flow in other tools, and relate your experience back to how it would work within data warehouses. Part 2 will go over the major data modeling design paradigms, which provide a common structure for these transformations. And part 3 will focus on how these transformations and data models can be put together and implemented in the data warehouse (this is the one that will focus on dbt).</p> <p>These posts will continue to be in the same spirit with the same target audience as the initial one: this is written for those of you who work with data but have not yet had a chance (or perhaps have recently begun) to work on a team that uses a data warehouse. I’m going to assume that you’ve started to develop intuitions about how to clean, wrangle, organize, and analyze data, and you want some help jumpstarting your ability to work professionally on a data team that has a data warehouse. And while the previous post introduced some broad principles for what data warehouses are, why you would want to use them, and how they tend to be used, this post will start to dive deeper into the transformation and modeling flow of data within the warehouse - the bread and butter of the “analytics engineer”.</p> <h2 id="a-philosophical-aside">A philosophical aside</h2> <p>Throughout this post, I want you to pay attention to how I talk about the transformation flow. I will use words like “intuition”, “design”, “philosophies”, “choices”, etc. The underlying point is this: data modeling - the thing you are doing when you implement specific transformations - is a creative act. There are no “right” or “wrong” choices (though there are certainly “better” and “worse” choices for your specific context and use case), and with time and practice you can grow your data modeling craft as a creative knowledge worker.</p> <p>Please note that when I say “creative”, I mean it in the sense of thinking about a concept or solving a problem in a new/different way, not in the imaginative or fantastical sense. Think of data modeling in the same way that you would think of mapmaking: you are creating a simplified and useful representation of the landscape that captures enough detail that it can serve a variety of use cases, while not including so much detail that the map becomes a mess of illegible scribbles. “The map is not the territory” - in other words, the model should not be confused with the reality it is representing. Models are imperfect, limited abstractions that must be interpreted. A model that perfectly and completely describes its reality has no utility at all (besides being impossible) - we simplify and choose what to emphasize because our minds have limits. To go back to maps: would you rather navigate while driving with your map application in “map” view or “satellite” view?</p> <p>So remember: the work of translating perceived reality into a limited respresentation that can be described in a machine-readable format, and then further transforming, integrating, and analyzing that data into a human-digestable format that can then be used to influence how others perceive reality (and thus their actions, which may effect reality)… is deeply philosophical, creative, and intellectually rewarding work (and hopefully impactful!).</p> <p>Furthermore, it is important to remember that all of your more abstract data work should be grounded in the reality that is your source truth and the impact that you want your data work to have. So it helps to have both knowledge and interest in that reality you are trying to model and influence. If you are still learning and looking for practice projects, or at the start of your career and looking for jobs, don’t make the mistake of thinking all data work is the same. Focus on the subjects that interest you the most and you have specialized knowledge in - and the parts of the world where you most want to make an impact. For me, that domain is (generally speaking) government services and international development. My favorite data sources (and the focus of my upcoming personal project) are about peace/conflict (a.k.a wars, and preventing/resolving them) and comparing political systems. What domains and data sources are you most interested in?</p> <p>All of that to say - it is impossible for any one person, blog post, book, or methodology to tell you how to transform and organize your data. What I hope to accomplish in this post is to build upon the intuitions you likely already have, and provide some structure and guiderails for how to go further. In the following posts, I will point to some resources you can use to dive even deeper into the many rabbit holes that exist in the realm of data modeling. But in the end, it is up to you to become the expert on your data and make creative data modeling choices to craft your transformations - and hopefully inform and influence the decisions and actions people take in a positive, productive way.</p> <h2 id="whats-in-a-table-and-whats-in-a-cte">What’s in a table? (and what’s in a CTE?)</h2> <p>If you read <a href="/blog/analytical-data-warehouses">the previous post</a>, then you know that data flows through many different tables and views in the data warehouse, from source to final data/analytical product. However, beyond a few basic rules like making sure your first transform is simple and has a 1:1 relationship with its source table, I did not go into just how these transforms get divided up into tables and organized in the warehouse. Figuring out when a particular transform should be materialized as a table/view, or just broken out into a CTE in your larger query, is often a matter of intuition (intuition founded on learned and internalized guidelines). This can be frustrating for beginners, but in this section I want to show that you probably already have developed some of that intuition - you just developed it in a different context.</p> <p>Before trying to bridge from intuition you developed either by writing code in notebooks or applying formulas in spreadsheets, let’s define a few key terms and note some caveats.</p> <p><strong>Transformations</strong>. I’ve used this term quite a few times already, and if you’re not sure what that means you’re probably already confused. A transformation simply refers to any type of change you are applying to dataset. Changing the <em>shape</em> of data by joining two tables or aggregating a table is a substantial transformation, while applying functions to columns like trimming whitespace or changing a text field into a datetime are simpler transformations. Adding data by appending rows or updating values is <em>not</em> a transformation. Essentially, any SQL select query that is persisted in the database (the result creates a new table/view) is a transformation.</p> <p><strong>Tables, views, and CTEs</strong>. A table in a database contains physical data structured by rows &amp; columns. A view is a saved query, and doesn’t actually contain data. A “Common Table Expression” (CTE) is similar to a subquery in that it is a self-contained SQL select query inside of a larger SQL query, but while subqueries can exist within a clause of the main query (e.g. the <code class="language-plaintext highlighter-rouge">select</code> or <code class="language-plaintext highlighter-rouge">from</code> clause), CTEs are pulled out, ordered, and the first CTE is preceded by a <code class="language-plaintext highlighter-rouge">with</code> keyword. CTEs are more readable, maintainable, and DRY (a CTE can be referenced multiple times in later queries, while a subquery must be repeated). If CTEs are a new concept for you, <a href="https://learnsql.com/blog/what-is-cte/">here</a> is a good introductory article.</p> <p><strong>You should already know SQL</strong>. If you are unfamiliar with SQL, then I’d suggest you revisit this post (and <a href="/blog/analytical-data-warehouses">the previous one</a>) after you have learned the basics of SQL and databases. If there is interest, I can write a separate blog post focused on how to learn SQL and the many free online resources available (as well as excellent books to borrow/buy). For now, if you’re still reading, I’m going to assume you are comfortable with writing SQL select queries.</p> <p><strong>Bring your own examples</strong>. This post does not really have any specific examples to illustrate the transformation flow. Instead, I’m going to be relying on you, the reader, to think back to past projects and fit the data &amp; code you are intimately familiar with to approaches I’m describing. The goal of this post is not to teach you how to do a specific technical thing, but rather to help develop a general mindset and approach to transforming data within a data warehouse. Plus, I’d much rather demonstrate the entire process by blogging my way through a personal project than coming up with a few trite examples - so there may not be any short examples right now, but there will be one very long example in the future. (Please don’t hate - I’m mostly writing these posts for the fun of it!)</p> <h2 id="building-intuition">Building intuition</h2> <p>Burgeoning data practitioners typically come to data warehouses having already developed some expertise in manipulating data in one of two paradigms: dataframes or spreadsheets. Pick which of the following sections to read depending on which best describes you.</p> <h3 id="for-the-pandas-or-polarsdplyretc-practitioner">For the pandas (or polars/dplyr/etc) practitioner</h3> <p>I first want to revisit a paragraph from the <a href="/blog/analytical-data-warehouses">previous blog post</a>:</p> <blockquote> <p>If you have worked on enough code-based analytics projects, you have probably learned the value of maintaining a proper data transformation flow. This may show up in how you organize your data folder: you have your “raw” data that is never to be altered, your cleaned/processed data that is an intermediate output, and your final data. You learn the value of using code to transform data - it means all transformations are documented, replicable, and easy to alter. Your notebooks/scripts are a mix of exploration, small cleaning tasks, and big transformations. You may have some functions in there for transformations that need to be performed repeatedly or to encapsulate more complicated code. You are displaying chunks of dataframes in order to visually examine the results and decide what needs to be done next. You are also saving dataframes to CSVs to be used elsewhere. All of these elements show up in the analytical data warehouse as well - they just look a bit different.</p> </blockquote> <p>Let’s dive deeper into this comparison: the analytical data flow of pandas code in jupyter notebooks and data in files vs the analytical data flow of SQL code in a dbt project and data in database tables.</p> <p>I’m going to assume that if you chose this section you are already familiar with manipulating data using pandas (or polars, or dplyr) in jupyter (or R markdown) notebooks in a git-tracked repo, and it is how this process works in data warehouses that you are not sure about. If that is not the case, then this section is probably not useful for you, as there is nothing to create a conceptual bridge from. Feel free to skip ahead to the next section or come back later.</p> <p>It may be useful for you to pause reading and go back to look at your last project. Scan through your notebooks with a critical eye. Don’t focus on the individual lines of code, but rather the overall structure. How did you organize your data files? How did you organize your notebooks? What code did you chunk together into one cell, and what code did you pull out so you could run it separately? When did you display your data, and what were you looking for? What types of transformations get saved to the same dataframe variable name (overwriting the dataframe), and what types of transformations get saved to a new variable name? Why did you choose to use a new variable name, and what naming schema organically developed for your variable names? When did you save your data to a file, and why? What code has been organized into functions, and why did you decide to do that? At what point in the development process did you decide to make that change? What notes/documentation did you include, in code comments or markdown cells? How different is your final completed notebook from how it looked during the development process? Did you pull out any exploratory notebook code and formalize it in a python script? How does the code in the python file compare to the code (that presumably accomplishes the same or a similar goal) in the notebook?</p> <p>Seriously, take a few minutes to pause reading, pull up GitHub or your local repo, examine your project, and try to answer these questions before continuing. It will help, and this blog post isn’t going to disappear.</p> <p>Caveats and code review concluded, let’s proceed.</p> <p>Your notebook likely follows a pattern like this: first, you import the data files you need and save it to a dataframe. Then, you apply some set of transformations, saving it to some new variable name. Then, you might apply a different set of transformations, and save those to a new variable name. Finally, you will save your transformed data to a file - perhaps at multiple points in the process.</p> <p>It’s useful to save sets of transformations to different dataframes because each time you tweak your code you have to re-run all of the transformations relevant for that dataframe variable name (or risk being unable to re-run your notebook and get the same result). You don’t want a new variable name for every single transformation, because that gets unwieldy, and you don’t want to use the same variable name throughout the notebook, because some blocks of code take longer to run and it becomes tiresome to re-run the whole notebook every time you make a tweak. So, you naturally develop some conventions for when to save a dataframe to a new variable name. Those groups of transformations that get applied to the same variable name - those are the same groups of transformations that correspond to CTEs. CTEs serve two purposes: (1) they allow you to order and chain many transformations, allowing the final overall query to accomplish more than one simple query alone; and (2) they make complex SQL code more readable, by logically grouping together transformations and assigning the result a meaningful name. So, think of your CTE aliases as being analagous to your dataframe variable names, and CTEs as accomplishing the same conceptual chunking that each successive dataframe iteration does.</p> <p>Why save a dataframe to a CSV file? You may have reached a point where you want to share the resulting transformed data with someone else. Or, you may want to use that data in another notebook. Or, you may be ready to do something else with that data - make a visualization, run a statistical analysis, etc. Regardless, you have identified that the data has been sufficiently transformed that it needs to be preserved in that state in a more permanent and reusable way than just an ephemeral dataframe that will disappear when the notebook is shut down. It is at this same point that you should conclude a transformation being performed by a SQL query, and save the resulting data to the database as a table/view. This will allow others to query the transformed data - for their own subsequent queries, for visualization, for exploratory analysis, for productionized ML pipelines, etc. So, think of saving a dataframe to a CSV as being analagous to saving a query’s output to a table/view.</p> <p>In short, data goes through many transformations. These transformations tend to be chunked together, due to necessity or conceptual similarity. At some point the transformation is substantial enough that the resulting data has its own value, and that state of the transformed data should be preserved for multiple future uses. This is true both in the dataframe flow of pandas code in jupyter notebooks, and the database flow of SQL queries making tables and views.</p> <h3 id="for-the-excel-or-sheets-enthusiast">For the Excel (or Sheets) Enthusiast</h3> <p>Spreadsheets remain the most common way most people interact with data. They are intuitive, easy to use, and extremely flexible and powerful. For the vast majority of use cases, spreadsheets are sufficient. But if you are reading this, then you have probably already bumped up against some constraints and know that databases can solve your spreadsheet woes.</p> <p>Have you ever accidently deleted the content of a cell without realizing it? Deleted some cells, only to realize that now the rest of your data has been shifted out of order as well? Realized that your dataset has exactly 1,048,576 rows… and some data is missing? Maybe you have manually, laboriously, transformed your raw data into something analyzable… only to learn that new data is available that needs to go through the exact same process? Or you get handed a spreadsheet to analyze, and the organization of the sheets make you want to question why you decided to work with data in the first place? Do you have a folder full of the exact same data, with some kind of versioning note in the file name (_v2, _FINAL, _FINALFINAL, _2022, _2020-2021, _thisyear, _forCDO, _forJane, etc)? At some point in your data journey, you’re going to look at all of your spreadsheets and think… there has to be a better way.</p> <p>Congratulations - there is! But if you have worked only with spreadsheets for your whole career, even the word “database” may be intimidating (or, you may be thinking, I already made a database with my spreadsheets!). Big, complex, analytical data warehouses may not initially seem like a viable solution for you, but I promise that if you have already started learning SQL then you are ready to start making that transition. Let’s talk about how the work you are currently doing translates over to the process you will follow when transforming data in the data warehouse, and the advantages this shift will offer.</p> <p>First, rather than getting emailed a spreadsheet to transform and analyze, that data should already be present in the database as a source table - you just need to know what the table name is. (If the data is not already in the database, that’s probably someone else’s job to get it in there and make sure it gets updated on a regular schedule). Next, you will need to write a SQL query in order to transform it. Think about the transformation process you would follow in your spreadsheet: you may do some data cleaning by making sure that a categorical column has only the set of values that should exist (correcting misspellings, removing whitespace, etc). You may turn a text column into a date column (if Excel hasn’t already tried to do it for you - good luck). You may do some math on your numerical values by creating a new column and using a formula. You may then need to do further math by subtracting that new column from another column. You may need to create a pivot table after these cleaned and transformed columns are created. You may need to create a new sheet with only a subset of the original data, or a new sheet that combines data together from two other sheets. Some of these transformations are small/intermediate - they are needed in order to get the data to its final form, and are typically done by modifying data inplace or creating a new column. Some transformations are more substantial - the result gets its own sheet. Usually transformations have to be done in a specific order. At various points you may save and share the resulting data by emailing the modified spreadsheet to a colleague, or start creating inline visualizations based on this transformed data.</p> <p>Think about at what point during the transformation process the data reaches a “final” state (which may happen multiple times in the overall process). You want to share out or visualize this transformed data. In a SQL transformation flow, the group of transformations you need to get to that point will compose your overall query, and result in a table or view being created in the database. Rather than emailing the spreadsheet, you can just let your colleague know the new table name, and they can then query that table. You can query that table with a BI tool in order to visualize it. And remember - all of those transformations were done with a SQL query, and the original source table remains unchanged. This means that if the source table gets updated with new data, you can simply re-run the SQL query, all of your transformations will get applied, and your transformed table will have the new data. If you made a mistake or need to modify your query, you can simply update the SQL and re-run the query. This is only possible because the source table remains unchanged.</p> <p>Now consider all of the transformations that would make up that overall query, and group them into stages. First, this group of transformations must happen. Then, this next group of transformations must happen - but they can only be done after the first group of transformations is done. Maybe you want to break those stages into smaller groups because certain transformations seem to form natural groups, and it makes more narrative sense for them to be separate. These groups of transformations, whether due to the necessity of the order they must be performed or the nature of the transformations, would be equivalent to the CTEs that make up your overall query. CTEs are your query building blocks - each one is complete and sufficient on its own, but stack them together and you can build a more complex overall structure. Chunking transformations together conceptually also helps your overall query to be more readable - after all, you don’t just want the transformation to happen, you also want other people to understand what the transformation is doing.</p> <p>In short, data goes through many transformations. These transformations tend to be chunked together, due to necessity or conceptual similarity. At some point the transformation is substantial enough that the resulting data has its own value, and that state of the transformed data should be preserved for multiple future uses. This is true both in the spreadsheet flow of functions and pivot tables, and the database flow of SQL queries making tables/views.</p> <h3 id="did-the-conceptual-bridges-hold">Did the conceptual bridges hold?</h3> <p>I hope that these comparisons made sense and you can more easily see how the data transformation work you’ve already been performing translates over to the SQL transformations you will craft to build out your data warehouse. However, so far these bridges are only built out of theoretical foundations - you’ll have to finish the rest of the job by practicing using SQL to transform raw input data into actionable output datasets, and all of the intermediate tables along the way. Most of this will only make sense after you’ve had experience building data models in your own data warehouse. Only with practice can you turn abstract theoretical knowledge into internalized tacit knowledge.</p> <p>If that still sounds intimidating, and you’re not sure how to get started with your own personal data warehouse project, you are in luck! I have my own personal project that I’ve been meaning to work on for quite a while now, and I’ve decided to write a series of blog posts along the way documenting my process (and motivating my progress). Stay tuned for that series in the coming months.</p> <h2 id="purpose-driven-design">Purpose-driven design</h2> <p>I want to note that so far, we have been focused on scenarios where we know where we are and where we want to go. We know what the raw source data looks like, and we know what the transformed data needs to look like in order to accomplish a specific purpose (such as creating a visualization, calculating a metric, or sharing summarized data). This is the most fundamental and impactful type of data design. Shifting transformations that you may have performed in a manual, isolated, undocumented way into an data warehouse paradigm where the transformation process can be automated, transparent, and documented is inherently valuable and a necessary first step. You know your data, you are analyzing your data, and you know how to get your data from point A to point B (and point C, D, etc). You know exactly what this data will be used for, what the purposes of the transformations are, and you can see your project through the entire data lifecycle.</p> <p>However, one drawback of this purpose-driven design paradigm is that it does not scale very well. On large data teams, there may be different people assigned to each task: ingesting, transforming, documenting, visualizing, and analyzing the data. Those tasked with transforming the data may not know all of the many purposes the data may need to be designed for. Furthermore, the data warehouse will need to house many different datasets, for many different purposes, transformed by different people at different times for different projects. If every dataset is only transformed for the initial known purpose, over time the design of the data warehouse will become rather chaotic (this is how you get a spaghetti DAG). Plus, it’s very likely that most of the data will no longer be in use, data transformations will have been duplicated as slightly different use cases arise, and users may not even realize that the data they need is already in the warehouse (though perhaps not in the form they need). This is not necessarily a bad problem to have, as it means that your data warehouse has survived for a few years and has been actively used by many different people. However, at some point it really does become a problem, and someone is going to look at the data spaghetti and think, “there must be a better way.”</p> <p>And of course, there is. In fact, there are quite a few you can choose from or combine in whatever way suits the larger purpose of your data warehouse. In part 2 (coming soon!) I will cover a few of the most important data modeling design paradigms in broad strokes and link to resources where you can learn more about each one.</p>]]></content><author><name></name></author><category term="data"/><category term="essays"/><summary type="html"><![CDATA[preparing to dive deeper into the flow of transformations in an analytical data warehouse]]></summary></entry><entry><title type="html">Analytical Data Warehouses - an introduction</title><link href="https://jennajordan.me/blog/analytical-data-warehouses" rel="alternate" type="text/html" title="Analytical Data Warehouses - an introduction"/><published>2023-08-13T00:00:00+00:00</published><updated>2023-08-13T00:00:00+00:00</updated><id>https://jennajordan.me/blog/analytical-data-warehouses</id><content type="html" xml:base="https://jennajordan.me/blog/analytical-data-warehouses"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/header_data_warehouses-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/header_data_warehouses-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/header_data_warehouses-1400.webp"/> <img src="/assets/img/header_data_warehouses.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>When I first started working on the City of Boston Analytics Team, I had never really worked with an analytical data warehouse before. I had experience with databases, and with the data flow in analytics projects (mostly using pandas, in jupyter notebooks), and I had used databases as a starting point for analytics projects, but I had not yet put all of those pieces together. Then I started working as a data engineer whose primary role was to operate within an analytical data warehouse, and I took a 4-week crash course in dbt… and my brain went into overdrive trying to sythesize everything I already knew and was learning in order to come up with a mental model of what an analytical data warehouse was, how it should operate, and why. Now, almost two years later, I’m pretty sure I get it - and I want to share how I conceptualize a data warehouse in hopes that it makes the journey easier for anyone else who may be in the same position I was.</p> <p>But first, a couple caveats:</p> <ol> <li>I’m still learning, and I know my understanding will continue to evolve as I continue to learn</li> <li>This is largely influenced by how my team uses our data warehouse, and it may be different for other teams</li> </ol> <h2 id="databases-vs-data-warehouses-transactional-vs-analytical-the-what-and-why">Databases vs data warehouses, transactional vs analytical (the what, and why)</h2> <p>An analytical data warehouse is the data source that powers analytical outputs - dashboards, reports, one-off statistical analyses, machine learning models, etc. Having a data warehouse makes sense when you are working in a team - you often need to share data, pick up other people’s projects, and know that an analytical output will continue to function even after a project is wrapped up. Having a reliable, managed, and shared infrastructure is a huge productivity boost. Also, pretty much every BI tool is built to at least connect to a database.</p> <p>But what makes a data warehouse different from a (relational) database? In large part, this is simply a matter of semantics. Any database can be a data warehouse, it all comes down to how you use it. If you are using a database for analytics, you are likely doing a lot more and more complicated queries to read from the database. If you are using a database to power an application, you are doing a lot more (and need faster) writes to the database. Transactional databases are optimized for writes, and analytical databases are optimized for reads. Some DBMSs are balanced and can be used for both (i.e. PostgreSQL). Others optimize heavily for one use case (Snowflake is pretty much only used for analytics). How you are using a database also dictates how you organize it. If you are using a transactional database to power an application, there is a very good chance your database is normalized (most typically into 3rd or Boyce-Codd Normal Form).</p> <p>Normalizing your data is the best way to organize your data when you want to reduce the duplication of data, avoid data anomolies for inserts/deletes/updates, and ensure relational integrity. But the normalized structure can make it difficult to answer seemingly simple questions - you often have to write complex queries with many joins. And analytics is all about asking questions of your data.</p> <p>If you are using your database to answer many different analytical questions, you probably have many different data sources - and many of those data sources may be completely different from each other and never intended to be joined together. This is when a database starts to become a data warehouse - rather than one cohesive place to store data for one purpose (and therefore the data is all related), the data warehouse is more like a data repository. It is stored in a single place because of the convenience, not because the data is necessarily related (though some if it certainly will be).</p> <p>In a well-designed relational database, it is usually pretty easy to understand how data is organized and linked through primary and foreign keys. You don’t necessarily need to know the data to query it so long as you know the structure. But an analytical data warehouse is not so easy to comprehend. There are almost never foreign keys, because they introduce complications to the ETL processes that update the data. If you are lucky, there are primary keys on some of the tables. To understand how an analytical data warehouse is organized, you instead need to look at the transformation flow.</p> <h2 id="the-transformation-flow-the-how-and-why">The transformation flow (the how, and why)</h2> <p>If you have worked on enough code-based analytics projects, you have probably learned the value of maintaining a proper data transformation flow. This may show up in how you organize your data folder: you have your “raw” data that is never to be altered, your cleaned/processed data that is an intermediate output, and your final data. You learn the value of using code to transform data - it means all transformations are documented, replicable, and easy to alter. Your notebooks/scripts are a mix of exploration, small cleaning tasks, and big transformations. You may have some functions in there for transformations that need to be performed repeatedly or to encapsulate more complicated code. You are displaying chunks of dataframes in order to visually examine the results and decide what needs to be done next. You are also saving dataframes to CSVs to be used elsewhere.</p> <p>All of these elements show up in the analytical data warehouse as well - they just look a bit different. No matter where the data lives, analytics data work should follow a set of core principles that cement data management best practices in the analytical output.</p> <h3 id="principles-of-data-management">Principles of data management</h3> <ol> <li>Preserved raw data: raw data should be a direct copy of the source as much as possible, and should not be altered (besides being updated with new data)</li> <li>Replicable transformations: all transformations of the raw data should be replicable/documented (the SQL/python code is saved, preferably in a git-tracked central repository) and automated if needed (transformations performed on a schedule in line with data imports)</li> <li>Tested production data: all data considered “production” (ready for analysis) should be able to pass tests of data quality. These tests should be documented and automated if needed, like the transforms</li> </ol> <h3 id="preserved-raw-data">Preserved raw data</h3> <p>When raw data is loaded into a data warehouse via an ETL process, it is loaded in a “source” table. Different teams have different names for this set of tables - “base”, “staging”, etc - but I will use “source” for the sake of simplicity/consistency. These source tables are often isolated or otherwise identifiable in the data warehouse. Some teams have a separate database only for source data, others have a separate schema or set of schemas for source tables, and some may use a naming convention to identify these tables (e.g. a suffix of “_stg”).</p> <p>These source tables reflect the actual source data as closely as possible. This means that they may have the wrong datatypes, need to be cleaned (e.g. trimming whitespace), split out into multiple columns (especially if it is JSON text), the column names may need to be changed, or some other transformation is needed before it can be considered “production ready”. But it is important that these raw source tables remain exactly the same as they were when first loaded into the database - you want to avoid <code class="language-plaintext highlighter-rouge">alter table</code> statements.</p> <p>Sometimes, these raw sources may come from a relational database. In this case, you may want to implement primary keys on the source tables - because if the primary key constraint is violated, that means something went wrong in the ETL process. However, implementing foreign keys is generally not recommended, as it can severely complicate the ETL process. Instead, document these foreign keys (in tests, in text, etc) and use them to inform downstream transformations.</p> <h3 id="replicable-transformations">Replicable transformations</h3> <p>The next step is to transform these source tables into “production” tables. There may be many transformations before producing the table that will be used for analysis, but there should always be at least one. In a data warehouse, a “transform” usually means a SQL select query that is used to create either a table or a view. For the purpose of this post, “production” refers to tables or views in the database that are ready to be used for any downstream analytical purposes (dashboards, analysis, further downstream views, etc), have been through a development and approval process, and have been designated as being “production” based on its name, schema, database, or some other indication.</p> <p>The first transform is the simplist - it should select from the source table and apply any basic cleanup that is needed. Let’s call the result of this first transformation the “base production” table. It should correspond to the source table closely, and should have a 1:1 relationship to the source table (so, no joins). It should also always be materalized as a table (not as a view). The base production tables - and all downstream transforms - should live in a separate schema/database from the source tables, or otherwise be easily distinguished from the source tables.</p> <p>Even if no cleanup or alteration from the base table is needed, this first transformation is still a necessary step. Why? Sometimes there is an error in the ETL process, and the source table may be wiped. If you only have one table (the source table), then you have lost that data, and it will effect any downstream uses on that table. However, if you have a base table (which selects from the source table), and the source table is wiped, then you can stop the transformation before the corresponding base production table is wiped. So, the base production table still has data (even if it is outdated - which is preferable to no data at all). Note: this is only possible if the base production table is materialized as a table, not a view.</p> <p>Even if a source is static (not being updated by an ETL process), you still want to have this source -&gt; base production table transform, and preserve both this separation and the tranformation applied. Why? You may discover at a later point that the base production table needs to be altered in some way - a column should be renamed, a data type needs to be corrected, whitespace needs to be removed, etc. Or, you may discover that a transform you thought you needed is actually incorrect, and you need to alter the transform. Once you alter the source table, there is no going back (besides dropping the table and re-creating it from the source). Whereas if you have a transformation query, you can simply re-run the query to re-create the altered production table. This is only possible if the raw data in the source table remains the same - and if the SQL used to do the transform is saved (preferably in a git-tracked repo).</p> <h4 id="further-transformations">Further transformations</h4> <p>While base production tables should be materialized as a table and should have a 1:1 relationship with its source table, all further downstream transformations can be materialized as views and query multiple tables. The primary reason that a downstream transformation would be materialized as a table instead of a view is for performance reasons - if the query is computationally expensive and takes a long time to run. Otherwise, views are preferred.</p> <p>Note: further downstream transformations should never query a source table - only the production tables/views. These tables/views generally live in the same schemas/databases as the base production tables.</p> <p>There may be many, many downstream transformations for a particular data source, and the structure of these can vary widely. There are many different design philosophies around this area of the data warehouse, but I will leave that for another post. Suffice to say, a large portion of the “thinking” work in a data warehouse is in writing these downstream transforms.</p> <h3 id="tested-production-data">Tested production data</h3> <p>When new data is imported and transformed on a regular cadence, it is important to have Data Unit Tests (DUTs) to automatically check that previous assumptions about the data still hold true. DUTs can be performed on any table/view in the data warehouse - source, production, or downstream views. For example, you might want to check that the source table contains some minimum number of rows before doing the transform to production - and if the test fails, then the transform will not happen. You may want to check that a field you assume is your primary key is actually unique and has no null values. You may want to check that a categorical field only has a limited list of values - and if it fails the test, you only want it to warn you, but not prevent the transformation. The most important tests (the ones you want to stop downstream transforms if they fail) should be performed as early in the transformation flow as possible (ideally, the source tables), while the nice-to-have tests that should only warn you about failures (and not prevent transformations) can be implemented further downstream.</p> <p>DUTs are a way to productionize data testing, but can also be useful during the exploratory phase when first designing transformations. You can test your data through a formal DUT structure, or through a series of queries. For example, you may want to <code class="language-plaintext highlighter-rouge">select distinct</code> on a field to see all possible values, or <code class="language-plaintext highlighter-rouge">select count(distinct __)</code> on a field compared to <code class="language-plaintext highlighter-rouge">select count(__)</code> to see whether there are duplicates. Based on this exploratory data testing, you may wish to revise your transform. And while it is important to document and preserve any SQL transform queries so they can be re-run, it is less essential to preserve these ad-hoc data tests - their primary purpose for static data is to inform your SQL query for transforming source data into the production table. However, if the data source may be updated, then formalizing them into DUTs is a good idea.</p> <h2 id="the-implications-or-why-dbt">The implications (or, why dbt)</h2> <p>Imagine you are an analyst, staring at this data warehouse and all of its many tables, trying to figure out which tables are going to have the answer to your question. Or, imagine you are an engineer, informed that something has gone wrong in a dashboard and you need to figure out what (and where) in the data flow something went wrong. What is the one thing that you are really going to want (need!) in order to do your job effectively and efficiently?</p> <p>Documentation.</p> <p>You are going to want documentation for your tables, the columns in those tables, the relationships and dependencies between those tables, the tests performed on those tables, and any external dependencies (dashboards relying on those tables, ETL processes powering the source tables). But documentation has a dirty secret - (almost) nobody wants to or has time to write documentation. Unless you make documentation fast and easy to produce (or you pay for it by making documentation someone’s job or primary responsiblity), it isn’t going to happen (at least not consistently).</p> <p>dbt may be advertised as a tool to transform (and test!) your data, but its real superpower is in the documentation that is produced as a side effect of how those transformations and test are implemented. If you do not currently have an infrastructure to support transformations and data unit tests within your data warehouse, then implementing dbt is a no brainer because it is the easiest out-of-the-box way to accomplish those fundamental tasks. But even if you do have a (likely custom/house built) infrastructure to do those transforms &amp; tests, making the switch to dbt is worth it, because of the documentation that is produced (and the culture of documentation that is encouraged/supported). Once you see a DAG (directed acyclic graph of table nodes) that visualizes every step from source to dashboard, there is no going back.</p> <p>Why? Because given enough time, your team will accumulate enough data sources (and the people most knowledgable about those sources will leave at some point), and enough complicated transforms and table structures, that working within the data warehouse will become a snakes’ nest of tangled dependencies, table rot, and dangerous assumptions. And if you can’t rely on your data warehouse, then your stakeholders can’t rely on your analytical outputs. Documentation is not just a nice to have - it is essential. Document your data, your transforms, your tests, your analytical outputs, everything - and then put that documentation in one easily accessible and searchable place. dbt makes this easy, and that is the real reason it has become the darling of the data community - and the reason I’ve wanted to implement it for our team ever since I learned enough about the tool and our current data infrastructure.</p> <p>Which bring us back to our principles of good data management for analytics. There was, in fact, one principle missing from the list, so let’s round it out.</p> <h3 id="principles-of-data-management-final-version">Principles of data management (final version)</h3> <ol> <li>Preserved raw data: raw data should be a direct copy of the source as much as possible, and should not be altered (besides being updated with new data)</li> <li>Replicable transformations: all transformations of the raw data should be replicable/documented (the SQL/python code is saved, preferably in a git-tracked central repository) and automated if needed (transformations performed on a schedule in line with data imports)</li> <li>Tested production data: all data considered “production” (ready for analysis) should be able to pass tests of data quality. These tests should be documented and automated if needed, like the transforms</li> <li>Documented data: the data (each column, each table) should be documented, as well as the data lineage (how the final data was produced from the raw source data)</li> </ol> <h2 id="bonus-the-development-cycle">Bonus: the development cycle</h2> <p>Now that we’ve brought dbt into the picture, we can talk about one final piece of the (modern) analytical data warehouse: the development cycle. In the principles above (and the blocks of text further above), note the use of the term “production”. The presence of “production” data implies the presence of data that is not “production” - something distinct from the raw source data already described. This missing something is the “development” version of the data - basically, the data/transform that has not yet been finalized.</p> <p>Tables that are still in development should be distinguished from production tables in the data warehouse. Dev tables may live in a separate database or schema, or be indicated through a table naming convention. Teams may also have less formal (read: social) ways of indicating that a table is in development, though this introduces opportunity for error. A table in development is not finalized - column names, order, and content may change, the table name itself may change, and the logic has not yet been reviewed and approved by the team. Essentially, it’s very risky (and certainly inefficient) to build downstream dependencies on dev tables, though there will always be cases where speedy delivery is a necessity and this rule has to be broken.</p> <p>One great feature of dbt is that this development phase of tables/views (dbt refers to them all as “models”) is built into how dbt works through the use of profiles. It’s very easy to designate a specific schema or database as a dev schema/database, and to build models agnostic of the dev/prod schema. It’s also why git is a core component of any dbt project - the “main” branch should have models in “production”, while feature branches should have models in “development”. You have to be familiar with the use of version control in a software development cycle in order to use dbt effectively, and the fact that dbt brings these software engineering practices into the modern analytical workflow is considered a major selling point of dbt.</p> <h2 id="in-conclusion">In conclusion</h2> <p>Unless you are already part of a data team that uses a data warehouse, it can be hard to understand what an analytical data warehouse is, how to use it properly, and why it is such an important part of working on a data team. If you’re in school or otherwise studying for a career in data, knowing how to work within a data warehouse will give you a big leg up over other entry level candidates. My hope is that this blog post can (1) convince you that you already know the most important pieces of the puzzle, (2) fill in some of the missing pieces of the puzzle, and (3) help you synthesize and put all of the pieces together to form a cohesive picture.</p> <p>In future posts I would like to continue to flesh out how to work in a data warehouse, but this concludes the introduction. If you have any questions or future topics you’d like me to focus on, let me know!</p>]]></content><author><name></name></author><category term="data"/><category term="essays"/><summary type="html"><![CDATA[what? how? why? data warehousing for analytics, explained (mostly)]]></summary></entry><entry><title type="html">Life Since Grad School</title><link href="https://jennajordan.me/blog/life-since-grad-school" rel="alternate" type="text/html" title="Life Since Grad School"/><published>2023-07-30T00:00:00+00:00</published><updated>2023-07-30T00:00:00+00:00</updated><id>https://jennajordan.me/blog/life-since-grad-school</id><content type="html" xml:base="https://jennajordan.me/blog/life-since-grad-school"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/header_lifesincegradschool-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/header_lifesincegradschool-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/header_lifesincegradschool-1400.webp"/> <img src="/assets/img/header_lifesincegradschool.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This website, and therefore this blog, has fallen by the wayside since I graduated from library school with my MSLIS in the spring of 2020… in the midst of a global pandemic. I wasn’t really sure what to do with the site, beyond letting it exist and adding some projects here and there, but I recently decided that it was time for a revamp (and rebrand/redesign). I wanted my personal website to say “working professional”, not “overly enthusiastic grad student” - though I am keeping all the old posts so the “overly enthusiastic grad student” is not going away. But it has been 3 years (wow!) since I was in grad school, and I have managed to get some professional experience under my belt - though with the pandemic raging as I entered the work force I had a bit of a rocky start.</p> <h2 id="2020">2020</h2> <p>My last semester of grad school was not the best. There was before spring break, and there was after spring break. Before spring break, everything was continuing on as usual, with some masks starting to appear. After spring break, everything shut down. All classes and work went remote. There was no graduation ceremony. I had no idea that the last time I saw my professors, classmates, coworkers, and firends, it would be the last time I saw them ever. While in undergrad I could not care less about the graduation ceremony, for grad school - a place where I really found my academic home - I was looking forward to the chance to see everyone one last time and say goodbye. Instead, there was just endless isolation.</p> <p>After graduating into a pandemic with no job offer yet in hand, I did what everyone seemed to be doing - I moved back home. My mom was living alone, I couldn’t afford to pay rent without a job, and after the isolation of the previous months I was looking forward to forming a little family bubble. I put most of my stuff in storage, sure that I would be moving soon to wherever I found a job. And sure enough, within a few months of graduating I got a job offer… with one big catch. I would need to get my security clearance. I was so excited to get a job offer, I ignored the perfectly reasonable advice every entry level professional is given (and ignores): don’t accept the first offer you get. I was told that the process would take about 6-12 months, and I hoped that my previous security clearance (for my internship with the State Department in undergrad) would help speed things up. In the meantime, I could find some short-term contracting gigs to start advancing my data skills and developing experience. So that’s exactly what I did.</p> <p>Pretty much as soon as I had some income coming in, I kept a promise that I had made to myself years ago at the end of undergrad (when I knew I was going to be doing a lot of traveling). I finally adopted a puppy. I adopted my sweet girl from Saving Grace, a rescue in Raleigh. At the rescue, the name on her tag was “Genuine Risk”. I named her <a href="/bella/">Bella</a>, after the loyal pony Bela in Wheel of Time. She was about 14 weeks old, the last of her litter, and shy as could be, but after 5 minutes of me sitting cross legged in her pen she crawled into my lap and fell asleep. That’s when I knew - and my mom really knew - that she would be coming home with us.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bella_blanket-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bella_blanket-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bella_blanket-1400.webp"/> <img src="/assets/img/bella_blanket.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>I also took up knitting (I know, such a classic pandemic hobby). The very first thing I knit was a blanket for Bella. My reasoning was: (1) she won’t care what it looks like, so it’s fine if it turns out awful and ugly, and (2) it’s getting cold, she’d probably appreciate a blanket that smells like me. (Actually I lie, the first 4 blanket squares got combined into a blanket for Molly, our much smaller and much older family dog). Sadly, that blanket no longer exists - it got slowly torn apart and consumed because… I gave it to a puppy. C’est la vie. But while the blanket slowly got smaller, I kept on <a href="/knitting/">knitting</a>, and eventually started knitting shawls as wedding presents. (6 shawls and 5 weddings later, I’m finally now starting on a shawl for myself)</p> <h2 id="2021">2021</h2> <p>A year came… and went. Still no word on the security clearance. I had done all of the steps (including going in person for the drug test, polygraph, etc) and I got no updates, no estimated timeline, nothing. I knew that I wanted to kick off my career properly - in a full-time position doing data work as a part of a larger team focused on public service - and the contracting gigs had only been meant as a temporary stopgap until I could join such a team. I had been applying for data librarian jobs and even got to the final round of interviews a couple times, but no dice (actually, <a href="/projects/carpentries-dataviz-workshop">my Carpentries lesson</a> was a side product of one of those interviews!).</p> <p>Finally, in late fall of 2021, I hit gold. A mutual on twitter pointed me towards a posting for a data engineer at the City of Boston’s Analytics Team. It was perfect - data work, in public service, and a genuine way to really start my career. I applied, made a <a href="/projects/streamlit-apps">streamlit app</a> for extra credit, and by the end of the year I had accepted a job offer.</p> <p>I kid you not, a week after accepting that job offer, my security clearance came through. But I knew that the data engineer position in Boston was a better fit for me, so I stuck with it and moved to Boston in January of 2022. Almost a year and a half of waiting on that security clearance… well, sometimes, timing really is everything.</p> <h2 id="2022">2022</h2> <p>My first year as a Data Engineer on the Analytics Team was a true learning experience - exactly what I was hoping for from my first job to kick off this new career. In grad school, I had learned SQL and how to design databases in 3rd Normal Form. At my job, I learned about analytical data warehouses and how SQL was used in production code, and I leveled up my SQL skills substantially (can you believe we learned about subqueries but not CTEs?). In grad school, I had learned about automated workflows as related to improving data quality. At my job, I learned about data orchestration (hello, YAML files and YAQL) and the pros and cons of different workflow design paradigms. In grad school, I mostly wrote my own python code from scratch to finish. At my job, I learned how to work with a team of engineers and contribute to an existing codebase. I learned how to work and contribute within a larger analytics team - rather than doing every part of the analytics flow myself.</p> <p>I also made sure to focus on my professional development in other ways. In March I took CoRise’s course <a href="https://corise.com/course/analytics-engineering-with-dbt">“Analytics Engineering with dbt”</a>, taught by Emily Hawkins. In August I took GovEx’s course on Data Governance. Both were valuable and what I learned in them I could immediately apply in my work.</p> <p>During my first year, I focused on learning how the Analytics Team, and the Engineering Team especially, worked, and how I could best contribute within the existing framework. I learned so much from my coworkers, and I found the experience of having fellow engineers that I could lean on and collaborate with invaluable. But in addition to learning how to contribute to what was already there, I was also starting to identify new ideas that I wanted to add to the mix. Primarily: <a href="https://docs.getdbt.com/docs/introduction">dbt</a>.</p> <h2 id="2023">2023</h2> <p>For my second year on the Analytics Team, I wanted to make a substantial impact to improve how the engineering team worked. This involved a lot of thinking and iterating through designs and strategies before I brought my proposals to the team. I wanted to make sure that when it came to the actual implementation of these plans, that it would go as quickly and smoothly as possible. It also meant communicating with my team and building interest and agreement in my proposals. I had been talking about dbt almost since I joined the team, but in a “this is a cool tool” way, not in a “let’s do it” way. If I was going to ask everyone to learn and use this new tool, I wanted to make sure they believed it was worth it too.</p> <p>I don’t want to go into too much detail about what dbt is and how we are implementing it - I’ll save that for a future blog post. But suffice to say that the project got started early in 2023, and after 6 months we are finally in a sprint of building models and adding to the project, with almost all engineers onboarded and starting to onboard analysts. I’m very excited to see what further progress we can make for the rest of the year - and I’m especially excited to be able to share this experience of implementing dbt for a city analytics team in <a href="https://coalesce.getdbt.com/agenda/from-coast-to-coast-implementing-dbt-in-the-public-sector">a talk at this year’s Coalesce</a> (dbt Lab’s annual conference).</p> <p>Besides the dbt project, this year I’ve also been working on larger and more complex projects that have involved a lot of data architecture/design work. Without going into too much detail, the city has a lot of legacy systems that don’t talk to each other, when city workers really need for information to be passed between those systems in order to do their work well and efficiently. I have been involved in a couple projects this year that have been focused on how to integrate these systems (or at least have all of the data in one place and able to be joined together), particularly for housing and development work. I love building ETL pipelines, but I know a project will be special when I get to do system design and data architecture work before building the pipeline. These projects are always bigger, longer, and trickier, involve working with more stakeholders and teams, and are just so rewarding because you can see the difference your contribution is making and you can build relationships outside of your team.</p> <p>Another high point for this year on the team is that I’ve had the opportunity to start teaching Carpentries workshops again. I taught a <a href="https://carpentries-incubator.github.io/git-novice-branch-pr/">workshop on git</a> because the analysts on the team have been writing more code and wanted to preserve and collaborate on their code in a GitHub repository, and I taught some <a href="https://swcarpentry.github.io/python-novice-gapminder/07-reading-tabular.html">sessions on python and pandas</a> as a part of a Data Culture pilot program focused on python. Later this year I’m planning on teaching a [SQL workshop](https://swcarpentry.github.io/sql-novice-survey/ and a session on querying APIs with python. Teaching computational skills is something I really enjoy, and it was the one thing I was really missing in this job last year.</p> <p>Finally, if you think that working on a city analytics team sounds interesting, I will plug the fact that we are <a href="https://www.boston.gov/news/join-city-bostons-department-innovation-and-technology">currently hiring for several positions</a> - if you live in Boston or want to move to Boston, <a href="https://www.boston.gov/career-center">apply</a>!</p>]]></content><author><name></name></author><category term="life-updates"/><category term="musings"/><summary type="html"><![CDATA[from grad student to working data professional]]></summary></entry><entry><title type="html">Carpentries Workshops</title><link href="https://jennajordan.me/blog/carpentries-workshops" rel="alternate" type="text/html" title="Carpentries Workshops"/><published>2021-09-28T00:00:00+00:00</published><updated>2021-09-28T00:00:00+00:00</updated><id>https://jennajordan.me/blog/carpentries-workshops</id><content type="html" xml:base="https://jennajordan.me/blog/carpentries-workshops"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/header_carpentries-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/header_carpentries-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/header_carpentries-1400.webp"/> <img src="/assets/img/header_carpentries.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>My Carpentries teaching journey started out slow - I taught a couple of times that first year, and stuck to the lesson I was most comfortable with (SQL &amp; Databases). However, at the start of the summer in 2021 my work put me in charge (or I volunteered to be in charge) of a group of undergraduate interns who wanted to learn how to use computational methods for open source intelligence analysis. So I put together a curriculum of Carpentries lessons to take my interns from zero-assumed knowledge to the ability to complete a computational analysis in Python. I’m teaching the same curriculum in the Fall (slightly expanded and refined) to another group of undergraduate interns. This allowed me to gain experience in teaching more of the core Carpentries lessons… and also inspired me to develop <a href="/projects/carpentries-dataviz-workshop">my own lesson focused on interactive data visualizations</a>!</p> <hr/> <h1 id="a-semester-long-curriculum-of-carpentries-workshops">A semester-long curriculum of Carpentries workshops</h1> <p>Each week I teach for 2 hours, and then learners can practice what they’ve learned and give feedback on the workshop in an assignment (delivered via Google Forms). I’ve included the curriculum schedule below:</p> <h2 id="week-0-self-assessment">Week 0: Self Assessment</h2> <p><strong>Goals:</strong></p> <ul> <li>Learners assess their current skill level</li> </ul> <p><strong>Assignment:</strong></p> <ul> <li><a href="https://forms.gle/QsB6fFpn9VWiVjRz9">Computational Skills Self Assessment form</a></li> </ul> <h2 id="week-1-github">Week 1: GitHub</h2> <p><strong>Goals:</strong></p> <ul> <li>Instructor &amp; learners introduce themselves</li> <li>Overview of the curriculum</li> <li>All learners have a GitHub account and know the basics of creating and modifying a personal repository on GitHub (with GitHub Desktop).</li> </ul> <p><strong>Assignment:</strong></p> <ul> <li><a href="https://forms.gle/SPUiKxH5gtc1q5o47">Assignment 1: GitHub</a></li> </ul> <p><strong>Resources:</strong></p> <ul> <li><a href="https://github.com/elliewix/github-training-brain-dumps/blob/master/github_directions.md">Getting Started with GitHub - Training by Elizabeth Wickes</a></li> <li><a href="https://docs.github.com/en/github/getting-started-with-github/signing-up-for-github">GitHub’s docs on creating a new account</a></li> <li><a href="https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/overview/getting-started-with-github-desktop#introduction">GitHub’s docs on GitHub Desktop</a></li> <li><a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/creating-a-new-repository">GitHub’s docs on creating a new repo</a></li> <li><a href="https://www.makeareadme.com/">Writing a good README</a></li> <li><a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository-from-github">GitHub’s docs on cloning a repo</a></li> </ul> <h2 id="week-2-the-shell-part-1">Week 2: The Shell (part 1)</h2> <p><strong>Lesson Plan:</strong></p> <ul> <li><a href="http://swcarpentry.github.io/shell-novice/">Shell workshop lesson plan from Software Carpentries</a> (Lessons 1-5)</li> </ul> <p><strong>Goals:</strong></p> <ul> <li>become comfortable navigating your computer via the command line</li> <li>learn the basic set of Bash commands (pwd, ls, man, cd, mkdir, nano, touch, mv, cp, rm, wc, cat, less, sort, head, tail, echo)</li> <li>learn how to chain commands using the pipe, redirect, and append</li> <li>learn how to use loops</li> </ul> <p><strong>Assignment:</strong></p> <ul> <li><a href="https://forms.gle/CqZ1zkhdAmdBju8c9">Assignment 2: The Shell</a></li> <li><a href="https://docs.google.com/document/d/1uvkMieUHK2JM4XPx8mAeEmqvfdNiDSAQc2mUHshrAvE/edit?usp=sharing">Answer Key for Assignment 2</a></li> </ul> <p><strong>Further Resources:</strong></p> <ul> <li><a href="http://linuxcommand.org/lc3_learning_the_shell.php#contents">The Linux Command Line - web tutorials</a></li> <li><a href="https://phoenixnap.dl.sourceforge.net/project/linuxcommand/TLCL/19.01/TLCL-19.01.pdf">The Linux Command Line - full free textbook</a></li> <li><a href="https://explainshell.com/">Explain Shell</a></li> </ul> <h2 id="week-3-the-shell-part-2">Week 3: The Shell (part 2)</h2> <p><strong>Lesson Plan:</strong></p> <ul> <li><a href="http://swcarpentry.github.io/shell-novice/">Shell workshop lesson plan from Software Carpentries</a> (Lessons 6 &amp; 7)</li> <li><a href="http://carpentries-incubator.github.io/shell-extras/">Shell Extras workshop lesson plan from Software Carpentries</a> (Lesson 2)</li> </ul> <p><strong>Goals:</strong></p> <ul> <li>Learn how to save a series of commands as a shell script</li> <li>Learn how to search files from the command line <ul> <li>grep, find</li> </ul> </li> <li>Learn how to generate and use your own SSH key pair</li> <li>Learn how to access a computer remotely <ul> <li>ssh, scp</li> </ul> </li> </ul> <p><strong>Assignment:</strong></p> <ul> <li><a href="https://forms.gle/hVq8VgEBWPyVXC4S8">Assignment 3: The Shell cont</a></li> <li><a href="https://docs.google.com/document/d/1B0qwQVUyNudAQ7jGPIAIONmU32FBedkNo4wkyPEsX74/edit?usp=sharing">Answer Key for Assignment 3</a></li> </ul> <p><strong>Further Resources:</strong></p> <ul> <li><a href="https://linuxize.com/post/using-the-ssh-config-file/">Setting up and using the SSH config file</a></li> </ul> <h2 id="week-4-git">Week 4: Git</h2> <p><strong>Lesson Plan:</strong></p> <ul> <li><a href="http://swcarpentry.github.io/git-novice/">Git workshop lesson plan from Software Carpentries</a></li> </ul> <p><strong>Goals:</strong></p> <ul> <li>Learn how to use git from the command line</li> <li>Set up git on the remote sandbox server <ul> <li>git config</li> </ul> </li> <li>Learn how to create repositories <ul> <li>git init</li> </ul> </li> <li>Learn how to track changes <ul> <li>git add, git commit, git status, git log, git diff</li> </ul> </li> <li>Learn how to use the history <ul> <li>HEAD, git show, git checkout, git revert</li> </ul> </li> <li>Learn how to not track things <ul> <li>.gitignore</li> </ul> </li> <li>Set up a remote repository <ul> <li>git remote, git push, git pull</li> </ul> </li> <li>Learn how to collaborate &amp; resolve conflicts <ul> <li>git clone</li> </ul> </li> </ul> <p><strong>Assignment:</strong></p> <ul> <li><a href="https://forms.gle/XyEa9RmgznnRuLPx7">Assignment 4: Git</a></li> <li><a href="https://docs.google.com/document/d/1VUVdRvK9YPIEqiVrWX_3pL1DeSr9e-brajbPsx0XgeY/edit?usp=sharing">Answer Key for Assignment 4</a></li> </ul> <h2 id="week-5-python-part-1">Week 5: Python (part 1)</h2> <p><strong>Lesson Plan:</strong></p> <ul> <li><a href="http://swcarpentry.github.io/python-novice-gapminder/">Plotting &amp; Programming in Python workshop lesson plan from Software Carpentries</a> (Lessons 1-7)</li> </ul> <p><strong>Goals:</strong></p> <ul> <li>Everyone has Anaconda (and thus Python &amp; Jupyter Lab) installed and is familiar with how to work within Jupyter Lab and use a Jupyter Notebook</li> <li>Learn about data types and type conversion in python</li> <li>Learn how to use built in functions</li> <li>Learn how to get help, read the built-in docs, and read errors</li> <li>Learn how to import and use libraries</li> <li>Learn how to read data into a dataframe and interact with the dataframe (pandas)</li> </ul> <p><strong>Assignment:</strong></p> <ul> <li><a href="https://forms.gle/oJYrV2aPVtnVPHJ56">Assignment 5: Python</a></li> <li><a href="https://docs.google.com/document/d/1FGN-ZHiPPu_dW73kC7o3ks9kWwXP8VtvXcPXe--2B2E/edit?usp=sharing">Answer Key for Assignment 5</a></li> </ul> <p><strong>Further Resources:</strong></p> <ul> <li><a href="https://carpentries-incubator.github.io/introduction-to-conda-for-data-scientists/">Intro to Anaconda from Software Carpentries</a></li> </ul> <h2 id="week-6-python-part-2">Week 6: Python (part 2)</h2> <p><strong>Lesson Plan:</strong></p> <ul> <li><a href="http://swcarpentry.github.io/python-novice-gapminder/">Plotting &amp; Programming in Python workshop lesson plan from Software Carpentries</a> (Lessons 8-12)</li> </ul> <p><strong>Goals:</strong></p> <ul> <li>Learn how to select data from a dataframe (pandas)</li> <li>Learn how to plot data (matplotlib.pyplot)</li> <li>Learn how to work with lists</li> <li>Learn about for loops and the accumulator pattern</li> </ul> <p><strong>Assignment:</strong></p> <ul> <li><a href="https://forms.gle/XPxxRaBubMaDaptD9">Assignment 6: Python &amp; pandas</a></li> <li><a href="https://github.com/NCRI-io/nclabs_pandaspractice">GitHub repo for the pandas practice</a></li> </ul> <h2 id="week-7-python-part-3--requests--rest-apis">Week 7: Python (part 3) + requests &amp; REST APIs</h2> <p><strong>Lesson Plan:</strong></p> <ul> <li><a href="http://swcarpentry.github.io/python-novice-gapminder/">Plotting &amp; Programming in Python workshop lesson plan from Software Carpentries</a> (Lessons 13-18)</li> <li><a href="https://cac-staff.github.io/summer-school-2016-Python/11-dicts.html">Storing Information with Dictionaries from Software Carpentries</a></li> </ul> <p><strong>Goals:</strong></p> <ul> <li>Learn about conditionals (if, else, elif)</li> <li>Looping over files (glob)</li> <li>Learn how to write functions</li> <li>Learn about the dictionary data type</li> <li>Learn how use python’s requests library to query a REST API</li> </ul> <p><strong>Assignment:</strong></p> <ul> <li><a href="https://forms.gle/GGDeBWAmg5Ck7WRA7">Assignment 7: Python</a></li> </ul> <p><strong>Further Resources:</strong></p> <ul> <li><a href="https://realpython.com/python-api/">Python &amp; APIs: A Winning Combo for Reading Public Data from Real Python</a></li> <li><a href="https://www.dataquest.io/blog/python-api-tutorial/">Python API Tutorial: Getting Started with APIs from DataQuest</a></li> </ul> <h2 id="week-8-interactive-data-visualizations">Week 8: Interactive Data Visualizations</h2> <p><strong>Lesson Plan:</strong></p> <ul> <li><a href="https://carpentries-incubator.github.io/python-interactive-data-visualizations/">Interactive Data Visualizations in Python workshop lesson plan</a></li> </ul> <p><strong>Goals</strong></p> <ul> <li>Learn how to create a new conda environment</li> <li>Learn how to wrangle data into a tidy shape</li> <li>Learn how to create line plots with plotly</li> <li>Learn how to create and run a streamlit app</li> <li>Learn how to add widgets to the streamlit app</li> </ul> <h2 id="week-9-databases--sql-part-1">Week 9: Databases &amp; SQL (part 1)</h2> <p><strong>Lesson Plan:</strong></p> <ul> <li><a href="http://swcarpentry.github.io/sql-novice-survey/">SQL workshop lesson plan from Software Carpentries</a> (Lessons 1-5)</li> </ul> <p><strong>Goals:</strong></p> <ul> <li>Learn how to select data from a table</li> <li>Learn how to sort results and remove duplicates</li> <li>Learn how to filter, or select subsets of data, based on boolean conditions</li> <li>Learn how to calculate new values to be returned in the results</li> <li>Learn about missing data, and incorporating NULL into queries</li> </ul> <p><strong>Assignment:</strong></p> <ul> <li><a href="https://forms.gle/wWQFYSREEXLkQQMA6">Assignment 8: SQL</a></li> </ul> <h2 id="week-10-databases--sql-part-2">Week 10: Databases &amp; SQL (part 2)</h2> <p><strong>Lesson Plan:</strong></p> <ul> <li><a href="http://swcarpentry.github.io/sql-novice-survey/">SQL workshop lesson plan from Software Carpentries</a> (Lessons 6-10)</li> </ul> <p><strong>Goals:</strong></p> <ul> <li>Learn how to aggregate data in queries (calculate sums, averages, etc)</li> <li>Learn how to combine tables in a query</li> <li>Learn about data hygiene, and principles of database design like primary &amp; foreign key constraints</li> <li>Learn how to create, modify, and delete data</li> <li>Learn how to use SQLite databases within a python script</li> </ul> <p><strong>Assignment:</strong></p> <ul> <li><a href="https://forms.gle/hdgDb7KsQU2DhVCw9">Assignment 9: SQL</a></li> <li>Review <a href="https://swcarpentry.github.io/sql-novice-survey/10-prog/index.html">Lesson 10</a> (Programming with Databases - Python) on your own</li> </ul> <h2 id="week-11-regular-expressions">Week 11: Regular Expressions</h2> <p><strong>Lesson Plan:</strong></p> <ul> <li><a href="https://librarycarpentry.org/lc-data-intro/">Regular Expressions workshop lesson plan from Library Carpentries</a></li> </ul> <p><strong>Goals:</strong></p> <ul> <li>Learn how to use Regular Expressions (regex)</li> </ul> <p><strong>Assignment:</strong></p> <ul> <li>Practice using regular expressions by completing some <a href="https://regexcrossword.com/">Regex Crosswords</a></li> </ul> <p><strong>Further Resources:</strong></p> <ul> <li><a href="https://youtube.com/playlist?list=PL7C1EB31127AB8A0B">Regular Expressions workshop videos from Software Carpentries</a></li> </ul>]]></content><author><name></name></author><category term="software-carpentries"/><summary type="html"><![CDATA[An overview of the workshops I've taught, including a semester-long syllabus.]]></summary></entry><entry><title type="html">About The Carpentries</title><link href="https://jennajordan.me/blog/about-the-carpentries" rel="alternate" type="text/html" title="About The Carpentries"/><published>2021-09-27T00:00:00+00:00</published><updated>2021-09-27T00:00:00+00:00</updated><id>https://jennajordan.me/blog/about-the-carpentries</id><content type="html" xml:base="https://jennajordan.me/blog/about-the-carpentries"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/header_carpentries-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/header_carpentries-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/header_carpentries-1400.webp"/> <img src="/assets/img/header_carpentries.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>If you’ve never heard of <a href="https://carpentries.org">The Carpentries</a> before, you may be confused - have I gotten into woodworking?! (No… but I have gotten into knitting - the real kind, not the RMarkdown kind).</p> <p>From the horse’s mouth, here’s what The Carpentries is all about:</p> <blockquote> <p><strong>Vision:</strong> Our vision is to be the leading inclusive community teaching data and coding skills.</p> <p><strong>Mission:</strong> The Carpentries builds global capacity in essential data and computational skills for conducting efficient, open, and reproducible research. We train and foster an active, inclusive, diverse community of learners and instructors that promotes and models the importance of software and data in research. We collaboratively develop openly-available lessons and deliver these lessons using evidence-based teaching practices. We focus on people conducting and supporting research.</p> <p>-– <a href="https://carpentries.org/about/">The Carpentries - About Us</a></p> </blockquote> <h2 id="how-i-got-involved-with-the-carpentries">How I got involved with The Carpentries</h2> <p>My first semester of my MSLIS, I took an Intro to Python class with Elizabeth Wickes. After completing the class, Elizabeth (an Instructor Trainer with The Carpentries and an elected member of the Executive Council since 2018) encouraged me to take the Carpentries instructor training class and get involved with the local UIUC chapter of The Carpentries… but it took me another year before I felt comfortable enough with my technical skills to feel like I could teach them. In December 2019, I finally took the instructor training class with Elizabeth Wickes &amp; Neal Davis. It was a 2-day class that prepared new instructors to teach Carpentries workshop - with a special emphasis on how to teach while live-coding. As with all things Carpentries, the <a href="https://carpentries.github.io/instructor-training/">Instructor Training course</a> is also freely available.</p> <p>I had the chance to be a helper for one in-person workshop in early 2020 before… the pandemic happened. Then, everything went remote. I was a helper for another workshop series online, before I finally felt comfortable enough to teach a workshop for myself in Summer of 2020 - the SQL lesson, which remains my favorite lesson to teach!</p> <h2 id="why-i-love-the-carpentries">Why I love The Carpentries</h2> <p>The Carpentries is something special. For one, all of the workshop lessons are freely available - so anyone can use the lesson plans to teach or learn for themselves. The lessons live in GitHub repos, so they can be collaboratively developed. Anyone can develop their own Carpentries lesson using the provided template and submit the lesson to the Carpentries Incubator, so there are a ton of lessons out there beyond the core set. All of the lessons follow a similar pedagogical philosophy live coding throughout the workshop, getting learners to a place of being able to <em>use</em> their new skills as quickly as possible, and being as inclusive and supportive as possible. <a href="https://carpentries.org/blog/2019/07/alex-ttt-reflection/">This reflection blog post</a> details some of the pedagogy that is the foundation of all Carpentries lessons.</p> <p>The Carpentries is also all about community. Some instructors are based at a university and have the support of their local chapter, but even if instructors don’t have a local chapter, they can be supported by the global online community. There are community discussions via Zoom and a Slack workspace so instructors can stay connected and learn from each other, and many instructors are active on social media, like Twitter. There’s also <a href="https://carpentrycon.org">CarpentryCon</a>!</p> <p>So if you’re interested in getting involved with The Carpentries, <a href="https://carpentries.org/volunteer/">go for it!</a> I cannot emphasize enough how much I have learned and benefited from being a part of The Carpentries community.</p>]]></content><author><name></name></author><category term="software-carpentries"/><summary type="html"><![CDATA[All about The Carpentries, how I got involved, and what I love about the organization.]]></summary></entry><entry><title type="html">My Classes for Spring 2020</title><link href="https://jennajordan.me/blog/my-classes-for-spring-2020" rel="alternate" type="text/html" title="My Classes for Spring 2020"/><published>2020-02-23T00:00:00+00:00</published><updated>2020-02-23T00:00:00+00:00</updated><id>https://jennajordan.me/blog/my-classes-for-spring-2020</id><content type="html" xml:base="https://jennajordan.me/blog/my-classes-for-spring-2020"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/header_fall2018classes-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/header_fall2018classes-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/header_fall2018classes-1400.webp"/> <img src="/assets/img/header_fall2018classes.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This is it - the last semester of my MS/LIS degree. As I am currently job searching, I decided to take a slightly lighter class load for this final semester: 2 regular classes, 1 short class, and an independent study. Here they are:</p> <ul> <li>IS532: Theory &amp; Practice of Data Cleaning</li> <li>IS590PZ: Data Structures &amp; Algorithms - Puzzles &amp; Games</li> <li>IS590SC: Introduction to Command Line Tools</li> <li>IS592: Independent Study</li> </ul> <p>Note that the course descriptions &amp; learning outcomes are pulled from the syllabi for each respective course.</p> <h2 id="is532-theory--practice-of-data-cleaning">IS532: Theory &amp; Practice of Data Cleaning</h2> <p>While I have encountered a lot of the topics covered in this class in previous classes (e.g. Regular Expressions, the Relational Model), this is still a must-take class at the iSchool. I have actually been meaning to take this class for a while, but because it is reliably offered every semester, I kept putting it of to take other classes. This class teaches several concepts important to data curation (e.g. data provenance, reproducibility), and includes some new topics that are quite exciting to me - like logic programming (Datalog) and workflow automation.</p> <h3 id="course-description">Course Description</h3> <blockquote> <p>Data cleaning (also: cleansing) is the process of assessing and improving data quality for later analysis and use, and is a crucial part of data curation and analysis. This course identifies data quality issues throughout the data lifecycle, and reviews specific techniques and approaches for checking and improving data quality. Techniques are drawn primarily from the database community, using schema-level and instance-level information, and from different scientific communities, which are developing practical tools for data pre-processing and cleaning.</p> </blockquote> <h3 id="learning-objectives">Learning Objectives</h3> <ul> <li>Understand how to detect and flag data quality problems.</li> <li>Understand principles of data and information modeling.</li> <li>Understand techniques that support automated data curation and cleaning.</li> </ul> <h3 id="key-topics">Key Topics</h3> <ul> <li>Introduction to Data Quality and Data Cleaning</li> <li>Syntactic Issues and Regular Expressions</li> <li>Hands-on Data Cleaning with OpenRefine… ​and optionally with R or Python</li> <li>Logic-Based Integrity Constraints in ​Datalog &amp; ​SQL</li> <li>Workflow Automation and Modeling</li> <li>From Workflows to Data Provenance and Reproducibility</li> </ul> <h2 id="is590pz-data-structures--algorithms---puzzles--games">IS590PZ: Data Structures &amp; Algorithms - Puzzles &amp; Games</h2> <p>This is a new class at the iSchool (this semester is the 2nd time it has been offered). The goal of the class is to teach students about data structures and algorithms in a fun and interesting way… through puzzles and games. Each week we are given a new puzzle or game that we have to represent in some kind of data structure and then solve based on a specific algorithmic approach. Many of the projects are done in groups, although some can also be completed individually. This class is challenging and fast-paced, but also highly rewarding because it pushes me to advance my python problem solving skills. Also, as a huge fan of puzzles and games, this class is just intrinsically interesting.</p> <h3 id="course-description-1">Course Description</h3> <blockquote> <p>Learn, experiment, code with, and compare performance of common data structures and algorithms in a fun, collaborative, and challenging context. In class, students will discuss and solve logic puzzles and play several types of strategy games. In small teams they will explore the deductive, strategic, and tactical decisions involved, select appropriate data structures &amp; algorithms to develop efficient program solutions to automate playing, solving, generating, or analyzing puzzles &amp; games. Techniques and tools used include analysis of efficiency (Big-O), recursion, minimax, Monte Carlo Tree Search, client/server network communications, deterministic vs non-deterministic algorithms. Structures used include arrays, matrices, hash tables, stacks, various trees, network graphs, and custom structures. For some projects, students will have competitions pitting their solutions against other teams</p> </blockquote> <h3 id="learning-objectives-1">Learning Objectives</h3> <p>Though the contextual focus of the course is on strategic games and logic puzzles, the underlying purpose is for students to learn and practice the following critical and broadly-useful skills:</p> <ul> <li>logical and analytical thinking and problem solving</li> <li>use of performance analysis techniques as one aspect of comparing similar solutions/algorithms</li> <li>understand how data structures and algorithms are interdependent and make suitable choices accordingly</li> <li>practical coding ability using data structures and concepts listed in the course description above.</li> </ul> <h2 id="is590sc-introduction-to-command-line-tools">IS590SC: Introduction to Command Line Tools</h2> <p>This is a one-month short course offered at the end of the semester. It covers many of the vital skills often glossed over in typical programming classes - like version control, shell scripting, and computer cluster/cloud tools.</p> <h3 id="course-description-2">Course Description</h3> <p>This class will provide an overview of the history and commonly offered command line interfaces and essential shell scripting tools. These approaches will be extended to cover common version control tools, including git and GitHub, their value, and how to appropriately organize a project within them. We will also review how to submit projects to the Illinois Campus Cluster tool, and touch on situations where it may be valuable to do so.</p> <h3 id="textbook">Textbook</h3> <p class="small"><br/> <strong>“The Linux Command Line”</strong> (2nd ed), by William Shotts</p> <p><a href="http://linuxcommand.org/tlcl.php" class="btn btn--primary">Available online here</a></p> <h2 id="is592-independent-study">IS592: Independent Study</h2> <p>I decided to do an independent study this semester because I wanted to learn how to analyze data using python packages that are typically used for data science projects. Last semester, I learned how to perform statistical analyses in R (IS542) and how to use various machine learning algorithms for data mining in WEKA (IS590DT). However, the language that I am most comfortable with - and use for data wrangling - is python, and I have yet to learn how to apply the concepts I learned in those previous classes to the python data science ecosystem. I also want to learn how to do time-series analysis - something that neither of those previous classes covered.</p> <p>This independent study is also functioning as a follow up to another class I took last semester, Open Data Mashups (IS590OM). The goal of that class was to produce a new analysis-ready dataset that combined data from other open data sources. I created a country-year time-series dataset that combined data from the Correlates of War project, the UCDP/PRIO Armed Conflict dataset, the World Bank’s World Development Indicators, and the Polity IV project. For my independent study, I will be analyzing this dataset in a variety of ways, implementing the statistical learning techniques I learned last semester in python.</p> <h3 id="resources">Resources</h3> <p class="small"><br/> <strong>“Introduction to Machine Learning with Python”</strong> (2016), by Andreas Müller and Sarah Guido</p> <p><a href="https://learning.oreilly.com/library/view/introduction-to-machine/9781449369880/" class="btn btn--primary">Available here</a></p> <p class="small"><strong>“Python for Data Analysis”</strong> (2017), by Wes McKinney</p> <p><a href="https://learning.oreilly.com/library/view/python-for-data/9781491957653/" class="btn btn--primary">Available here</a></p> <p class="small"><strong>“Python Data Science Handbook”</strong> (2017), by Jake VanderPlas</p> <p><a href="https://jakevdp.github.io/PythonDataScienceHandbook/" class="btn btn--primary">Available here</a></p> <p class="small"><strong>“Machine Learning”</strong> MOOC by Andrew Ng</p> <p><a href="https://www.coursera.org/learn/machine-learning/home/info" class="btn btn--primary">Available here</a></p>]]></content><author><name></name></author><category term="MSLIS"/><summary type="html"><![CDATA[what classes I took for my 4th (and final) semester of grad school]]></summary></entry><entry><title type="html">My Classes for Fall 2019</title><link href="https://jennajordan.me/blog/my-classes-for-fall-2019" rel="alternate" type="text/html" title="My Classes for Fall 2019"/><published>2019-09-29T00:00:00+00:00</published><updated>2019-09-29T00:00:00+00:00</updated><id>https://jennajordan.me/blog/my-classes-for-fall-2019</id><content type="html" xml:base="https://jennajordan.me/blog/my-classes-for-fall-2019"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/header_fall2018classes-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/header_fall2018classes-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/header_fall2018classes-1400.webp"/> <img src="/assets/img/header_fall2018classes.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>One year down, one year to go! During the first year of my MSLIS degree, I focused on the fundamentals: how to organize and process data. This year, I am shifting my focus to analysis. This semester I am taking three classes focused on different ways to analyze data, as well as one project-oriented class that will allow me to collect together the data I want to analyze.</p> <ul> <li>IS542: Data, Statistical Models, and Information</li> <li>IS590DV: Data Visualization</li> <li>IS590DT: Data Mining</li> <li>IS590OM: Open Data Mashups</li> </ul> <p>Note that the course descriptions, themes, learning outcomes and such are pulled from the syllabi for each respective course.</p> <h2 id="is542-data-stats--info">IS542: Data, Stats, &amp; Info</h2> <p>This is an introduction to statistics for information professionals - it covers the fundamental concepts of statistical analysis and how to perform those analyses in base R using RStudio.</p> <h3 id="course-description">Course Description</h3> <blockquote> <p>An introduction to statistical and probabilistic models that are used to quantify information, assess information quality, and make decisions in a principled way. The increasing prevalence of massive data sets and falling computational barriers have rendered statistical modeling an integral part of contemporary information management. With this in mind, this class prepares students to select and properly undertake common modeling tasks. The course reviews relevant results from probability theory, emphasizing the merits and limitations of familiar probability distributions as vehicles for modeling information. Subsequent consideration includes parametric and non-parametric predictive models, as well as extensions of these models for unsupervised learning. Throughout these discussions, the course focuses on model selection and gauging model quality. Applications of statistical and probabilistic models to tasks in information management (e.g. prediction, ranking, and data reduction) are emphasized.</p> </blockquote> <h3 id="learning-outcomes">Learning Outcomes</h3> <ul> <li>Explain the role of marginal, joint, and conditional probability in modeling processes involving information.</li> <li>Select, parameterize, and compare probability distributions as vehicles for modeling information.</li> <li>Specify, estimate and evaluate elementary parametric and non-parametric statistical models.</li> <li>Articulate the responsibilities of a professional who creates, describe, or uses models of data.</li> </ul> <h3 id="textbooks">Textbooks</h3> <p class="small"><br/> <strong>“An Introduction to Statistical Learning: with Applications in R”</strong> (2013), by Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani</p> <p><a href="http://faculty.marshall.usc.edu/gareth-james/ISL/" class="btn btn--primary">Author’s Site</a></p> <p class="small"><strong>“OpenIntro Statistics”</strong> (3rd ed)</p> <p><a href="https://www.openintro.org/stat/textbook.php?stat_book=os" class="btn btn--primary">Publisher’s Site, free download</a></p> <p class="small"><strong>“An Introduction to R”</strong> (3rd ed), Venables, W.N., Smith, D.M and the R Core Team</p> <p><a href="http://cran.r-project.org/doc/manuals/R-intro.pdf" class="btn btn--primary">Full Document</a></p> <h2 id="is590dv-data-visualization">IS590DV: Data Visualization</h2> <p>One of the most popular classes in the iSchool, this class is all about data visualization. The class mostly focuses on python libraries, and each class has both a lecture that deep-dives on one particular aspect of visualization as well as live code-alongs.</p> <h3 id="course-description-1">Course Description</h3> <blockquote> <p>Data visualization is crucial to conveying information drawn from models, observations or investigations. This course will provide an overview of historical and modern techniques for visualizing data, drawing on quantitative, statistical, and network-focused datasets. Topics will include construction of communicative visualizations, the modern software ecosystem of visualization, and techniques for aggregation and interpretation of data through visualization. Particular attention will be paid to the Python ecosystem and multi-dimensional quantitative datasets.</p> </blockquote> <h3 id="central-themes">Central Themes</h3> <ol> <li>What are the components of an effective visualization of quantitative data?</li> <li>What tools and ecosystems are available for visualizing data?</li> <li>What systems can be put in place to generate visualizations rapidly and with high-fidelity representation?</li> </ol> <h3 id="course-website">Course Website</h3> <p>Lecture slides and Jupyter notebooks from the code-alongs are available on the course’s GitHub website.</p> <p><a href="https://uiuc-ischool-dataviz.github.io/fall2019/" class="btn btn--primary">IS590DV Fall 2019 Website</a></p> <h2 id="is590dt-data-mining">IS590DT: Data Mining</h2> <p>While IS542 focuses on the more traditional methods of statistical analysis, this class focuses on modern methods of extracting information from large data. Techniques for classification, clustering, and prediction are taught using <a href="https://www.cs.waikato.ac.nz/ml/weka/">WEKA</a>, a free software for machine learning.</p> <h3 id="course-description-2">Course Description</h3> <blockquote> <p>Data mining refers to the process of exploring large datasets with the goal of uncovering interesting patterns. This process usually involves a number of tasks such as data collection, pre-processing, and characterization; model fitting, selection, and evaluation; classification, clustering, and prediction. Although data mining has its roots in database management, it has grown into a discipline that focuses on algorithm design (to ensure computational feasibility) and statistical modeling (to separate the signal from the noise). As such, it draws heavily upon a variety of other disciplines including statistics, machine learning, operations research, and information retrieval. This course will cover the major data mining concepts, principles, and techniques that <em>every information scientist should know about.</em> Lectures will introduce and discuss the major approaches to data mining, computer lab sessions coupled with assignments will provide hands-on experience with these approaches, and term projects offer the opportunity to use data mining in a novel way. Mathematical detail will be left to the students who are so inclined.</p> </blockquote> <h3 id="course-objectives">Course Objectives</h3> <ol> <li>To gain a broad exposure to data mining concepts and principles through lectures and discussion.</li> <li>To develop a working proficiency in selected data mining techniques through lab sessions, hands-on assignments, and office hours.</li> <li>To nurture the ability to detect opportunities to apply data mining concepts, principles and techniques in new scenarios by independent exploration of resources beyond the course materials, and, optionally, through a course project.</li> </ol> <h3 id="textbook">Textbook</h3> <p class="small"><br/> <strong>“Data Mining: Practical Machine Learning Tools and Techniques”</strong> (4th ed), by I.H. Witten, E. Frank, M.A. Hall, and C.J. Pal</p> <p><a href="https://doi.org/10.1016/C2015-0-02071-8" class="btn btn--primary">Book via ScienceDirect</a></p> <h4 id="data">Data</h4> <p>Data used for the course is available through the professor’s website.</p> <p><a href="http://abel.lis.illinois.edu/data/" class="btn btn--primary">Data</a></p> <h2 id="is590om-open-data-mashups">IS590OM: Open Data Mashups</h2> <p>The entire point of this class is to produce a new dataset that combines multiple other open data sources. The project is the class - with some career planning and development sprinkled in along the way. The end goal is to have a project for your portfolio, and the tools to use that project when applying for jobs - think elevator pitch, cover letter, resume, presentation, etc. As an added bonus, you have an interesting dataset ready and waiting for analysis.</p> <h3 id="course-description-3">Course Description</h3> <blockquote> <p>Data sharing and modern open data standards have been creating large repositories of data that remain disconnected. Many data science and machine learning techniques are boosted by incorporating data representing a variety of domains and granularities. Topics on data curation, data cleaning, copyright, web scraping, storage, processing, and automation will be reviewed. This course seeks to explore techniques and perspectives of combining various data sources to create a dataset ready for analysis, but in a project oriented space so that each topic is synthesized with practice and experienced in context. Students will select a project area and explore the technical and conceptual requirements of that project space, eventually producing a proof of concept around it. All project domains and areas are open, with the only requirement being that they combine several data sources into a new dataset. This course is meant for students who have completed at least two semesters of coursework, are comfortable with programming in Python (the project can be completed in any language, but instruction will be in Python), and desire a space to explore and develop a capstone or independent study project. However, further work on the project is not a requirement. Guest speakers and field experts from the University Library will be invited. Students will be encouraged to share and publish their datasets at the end of the semester.</p> </blockquote> <h3 id="learning-goals">Learning Goals</h3> <ol> <li>Identify and assess relevant data sources for a research project</li> <li>Process, clean, and quality check datasets</li> <li>Combine multiple datasets into one for an analysis process</li> <li>Produce quality dataset and project documentation</li> <li>Effectively deliver various types of project pitches</li> <li>Write effective conference talk proposals</li> <li>Provide constructive peer feedback and peer reviews</li> <li>Receive and interpret peer feedback</li> </ol>]]></content><author><name></name></author><category term="MSLIS"/><summary type="html"><![CDATA[what classes I took for my 3rd semester of grad school]]></summary></entry><entry><title type="html">My Class and Internship for Summer 2019</title><link href="https://jennajordan.me/blog/my-class-and-internship-for-summer-2019" rel="alternate" type="text/html" title="My Class and Internship for Summer 2019"/><published>2019-07-31T00:00:00+00:00</published><updated>2019-07-31T00:00:00+00:00</updated><id>https://jennajordan.me/blog/my-class-and-internship-summer-2019</id><content type="html" xml:base="https://jennajordan.me/blog/my-class-and-internship-for-summer-2019"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/header_fall2018classes-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/header_fall2018classes-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/header_fall2018classes-1400.webp"/> <img src="/assets/img/header_fall2018classes.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Today was the last day of both my class and my internship for the summer! I have been taking a class online, IS562: Metadata in Theory &amp; Practice, as well as working as a Data Science Intern at the Program on Governance and Local Development in Gothenburg, Sweden. First I’ll introduce the class, and then share a reflection on my internship experience.</p> <h2 id="is562-metadata-in-theory--practice">IS562: Metadata in Theory &amp; Practice</h2> <p>Rather than focusing on learning a specific metadata schema (some classes focus just on using those common in libraries, like MARC and MODS), this class focused on teaching the overarching concepts and technical traits that all metadata schemas share, in order to prepare students to work with any of the wide variety of metadata schemas and standards used in the real world (libraries, companies, academia, government, archives, etc). Along the way we got practice using a wide variety of specific metadata schemas (Dublin Core, CDWALite, PREMIS, and CIDOC-CRM just to name a few). While most metadata schemas are based in XML, we also learned about schemas that use RDF and how the semantic web and linked open data are becoming more prominent in the metadata world. PREMIS is a schema that currently uses XML but is in the process of transitioning to RDF, which makes it a very interesting schema to study.</p> <h3 id="course-description">Course Description</h3> <blockquote> <p>Metadata plays an increasingly critical role in the creation, distribution, management and use of electronic materials. This course will combine theoretical examination of the design of metadata schema with their practical application in a variety of settings. Hands-on experience in the creation of descriptive, administrative, technical, provenance and structural metadata in XML- and RDF-based schema, along with their application in systems such as harvesting and digital repositories, will help students develop a thorough understanding of current practices in metadata and metadata schema creation.</p> </blockquote> <blockquote> <p>Combines theoretical examination of the design of metadata schema with their practical application in a variety of settings. Hands-on experience in the creation of descriptive, administrative, and structural metadata, along with their application in systems such as OAI harvesting, OpenURL resolution systems, metasearch systems and digital repositories, will help students develop a thorough understanding of current metadata standards as well as such issues as crosswalking, metadata schema, metadata’s use in information retrieval and data management applications, and the role of standards bodies in metadata schema development.</p> </blockquote> <h3 id="main-topics">Main Topics</h3> <ul> <li>Identifiers</li> <li>Descriptive Metadata - Dublin Core, CDWALite</li> <li>Administrative Metadata - PBCore</li> <li>Technical Metadata, Provenance &amp; Preservation - PREMIS, MIX,</li> <li>Structural Metadata - METS</li> <li>XML, Oxygen (XML Editor), Designing schemas with XSDs</li> <li>RDF, the Semantic Web, Serialization, and Linked Open Data - CIDOC-CRM</li> <li>Crosswalking, Quality Control, XSLTs</li> <li>OAI-PMH, SPARQL</li> <li>Workflows and Application Profiles</li> </ul> <h2 id="internship">Internship</h2> <p>I have spent the past 10 weeks working as a Data Science Intern at the Program on Governance and Local Development (GLD). The internship was kicked off in the best way possible - attending GLD’s annual conference to learn about accountability in local governance and enjoying the wonderful hospitality only a Swedish seaside spa hotel can offer. The conference was a great way to learn about the ongoing academic work in local governance and development, and I was able to meet many interesting professionals from both academia and development agencies. But after the conference, it was time to get to work. This summer GLD has been conducting a survey in Kenya, Zambia, and (later) Malawi to gather data for their Local Governance Performance Index. GLD had just hired a new Data Scientist, and it was my job to help her with monitoring the data incoming daily from the survey. In addition to learning new tools like Survey To Go and dipping my toes into R, I was able to use the Python skills I’ve spent the last year developing almost every day. My skillset of information processing and organization was a perfect complement to the Data Scientist’s skillset in statistical analysis (she had just completed her PhD in Statistics), and we worked really well together. Data science typically has two sides - preparing the data, and analyzing the data. I happen to enjoy (and have more experience in) preparing the data, while her expertise was in analysis. Along the way, I got a few ad-hoc lessons in various statistical concepts (she loves to teach statistics, and I was a very willing audience), and I did my best to make her job easier and allow her to spend more time on analyzing the data.</p> <p>The vast majority of my python work was in processing XML documents using XPath (extracting needed information and sometimes putting it into tabular form), reorganizing tabular data using Pandas (with my design choices informed by relational databases), and writing extracted data into whatever format was needed for analysis (such as WKT files for use in QGIS). Every week - sometimes every day - there was some new information puzzle to solve… and it was fun. This was messy, real-world data that would eventually be used to try and improve people’s lives. While using my newly developed technical skills was a major priority for me, it was just as important that my work, my time and effort, would go toward improving the world.</p> <p>This internship was also a perfect transition between my first year at the iSchool - which was focused on information organization and processing - and my second year at the iSchool - which will be more focused on data analysis. I got to use my python skills prepare data for analysis, while getting an introduction to analysis through the osmosis of office conversations. I’ve even started working my way through Hadley Wickham’s <a href="https://r4ds.had.co.nz">R For Data Science</a>, in anticipation of learning R in one my classes next semester. I have learned so much over the past year… I can only hope that I will learn just as much over the next!</p>]]></content><author><name></name></author><category term="MSLIS"/><summary type="html"><![CDATA[the class I took during the summer semester of grad school and my summer internship]]></summary></entry><entry><title type="html">Defining Unique Identifiers</title><link href="https://jennajordan.me/blog/defining-unique-identifiers" rel="alternate" type="text/html" title="Defining Unique Identifiers"/><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><id>https://jennajordan.me/blog/defining-unique-identifiers</id><content type="html" xml:base="https://jennajordan.me/blog/defining-unique-identifiers"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/header_identifiers-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/header_identifiers-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/header_identifiers-1400.webp"/> <img src="/assets/img/header_identifiers.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><strong>Note</strong>: This was originally written as a final paper for IS590TH: Theories of Information, in May 2019. I’ve edited it slightly for this blog post.</p> <h2 id="introduction">Introduction</h2> <p>Generally speaking, a Unique Identifier (UID) is an inscription that represents (no more than) one entity within a given system. UIDs are essential to the functioning of modern information systems, so it is important to understand and define what a UID is and how it should be used.</p> <p>In <a href="https://doi.org/10.1371/journal.pbio.2001414">“Identifiers for the 21st Century”</a>, McMurry et al. provides guidelines for creating good unique identifiers. However, while they outline the desirable characteristics of a UID, they refrain from stating which characteristics are necessary for an identifier to truly qualify as a UID, and which are merely good practice. In <a href="http://dx.doi.org/10.1007/s11023-011-9230-6">“Sense and Reference on the Web”</a>, Halpin examines a specific type of identifier, the URI (uniform resource identifier), but also refrains from defining unique identifiers more generally outside of the context of the web.</p> <p>In this post, I will define unique identifiers by deducing their essential properties.</p> <h2 id="what-is-the-purpose-of-a-uid">What is the purpose of a UID?</h2> <p>Information systems exist to represent or describe some aspect of the real world. Entities are the specific things that we are describing through their attributes and relationships. For example, think of a person. You may wish to record specific attributes of this person, such as their name, age, eye color, hair color, height, etc. You may wish to describe their role within the system by establishing relationships with other entities - what company they are employed by, who their parents are, or what objects they own. But how can you identify this person? In natural language, you would probably use their name. But what if there are multiple people with the same name? You might add other attributes - “the Jane with the brown hair”, or “the Jane who works for B Corp.” You may need to use multiple attributes to identify the intended person. However, the combination of these attributes (which can uniquely identify Jane) is not a UID.</p> <p>Think about what is happening in your mind. You have a mental concept of the person, but you cannot telepathically transmit this mental concept to another person. So instead, you describe the person using attributes - things that you associate with your concept of the person. This person’s name is Jane. This person is a woman. This person has brown hair, and so on. You know that the other person you are conversing with also has a mental concept of Jane. If you settle on the right combination of attributes (which uniquely identify Jane for both of parties), then you will know that saying “Jane” refers to that specific person.</p> <p>Just as you cannot telepathically transmit your mental concept of Jane to another person, you cannot transmit this concept to a computer. However, you still want to create a record of Jane in the information system, including all of her attributes. Unlike a person, however, a computer is unable to form a mental concept. Instead, the concept of the person named Jane is represented in the information system by a UID. Let’s say Jane’s UID is <code class="language-plaintext highlighter-rouge">CH4TW1N</code>. You can tell the computer that <code class="language-plaintext highlighter-rouge">CH4TW1N</code>’s name is Jane, that <code class="language-plaintext highlighter-rouge">CH4TW1N</code> is a woman, that <code class="language-plaintext highlighter-rouge">CH4TW1N</code> has brown hair, and so on. Thus, a UID functions for a computer like a mental concept functions for a person. In <a href="https://en.wikipedia.org/wiki/Gottlob_Frege">Fregean</a> terms, a UID is a <a href="https://en.wikipedia.org/wiki/Proper_name_(philosophy)">proper Name</a>, with the entity it picks out as its referent. This is the UID’s fundamental purpose in information systems.</p> <h2 id="what-qualifies-as-a-uid">What qualifies as a UID?</h2> <p>Let’s first begin by describing an identifier.</p> <p>An identifier is the <strong>physical, inscribable representation of a concept</strong>. The most common form of a UID is an alphanumeric string stored on a computer. For example, take the alphanumeric string ‘CH4TW1N’. On a computer, this alphanumeric string has a specific encoding, and could be translated to some combination of 1s and 0s, which themselves are physically encoded in the computer’s hardware. A person could also physically write down ‘CH4TW1N’ with pen and paper, and it would still be an identifier. However, I could not simply say out loud the phonetic pronunciation of this string and expect it to be an identifier - it cannot be referenced at a later time (unless it was recorded, in which case it is still being physically encoded on some medium). So, the first fundamental trait of an identifier is that it must be an inscription in some form that can be referenced at a later time.</p> <p>Furthermore this inscription must pick out an entity. An entity could be a concept, a person, a physical object, a place, etc. Anything that has an independent concept in your mind is an entity; more commonly, in English a good rule of thumb is that entities are nouns (person, place, thing, or idea). When two entities are connected in some way, that connection is referred to as a relationship. Relationships are not entities; however, certain relationships may be instances of a concept, which may be an entity. For example, Jane’s brother is Martin. The Jane-Martin relationship is not an independent entity, because it cannot mentally exist without either Jane or Martin. However, the concept of being siblings can exist independently, and could be an entity. While translating relationships into entities can be quite complex, attributes are simpler. If Jane has brown hair, then ‘brown hair’ is an attribute of Jane. However, ‘brown hair’ is not exclusive to Jane - we can picture brown hair independently of Jane. Attributes can often be entities themselves.</p> <p>So, we understand what an identifier is. However, unique identifiers have two core additional properties: UIDs must be both <strong>unique</strong> and <strong>unambiguous</strong>.</p> <p>If a UID is <strong>unambiguous</strong>, any given UID points to exactly one entity (<a href="https://doi.org/10.1371/journal.pbio.2001414">McMurry et al</a>). For example, if there are two Janes at B Corp, then the identifier ‘Jane’ will pick out two separate entities. The identifier ‘Jane’ is ambiguous, and therefore not a UID. If a UID is <strong>unique</strong>, any given entity is assigned exactly one identifier (<a href="https://doi.org/10.1371/journal.pbio.2001414">McMurry et al</a>). If Jane is assigned the identifier <code class="language-plaintext highlighter-rouge">CH4TW1N</code> at B Corp, then finds a new job a F Corp where she has the identifier <code class="language-plaintext highlighter-rouge">W4TCH3R</code>. She later moves back to B Corp, and is assigned the new identifier <code class="language-plaintext highlighter-rouge">3L1Z4PM</code>. Jane now has two identifiers at B Corp. Thus, Jane does not have a unique identifier, by virtue of the fact that two identifiers will pick her out.</p> <p>The two core properties of uniqueness and unambiguousness imply two further properties - <strong>identifier stability</strong> and <strong>entity stability</strong>. An identifier is stable if it does not change over time (<a href="https://doi.org/10.1371/journal.pbio.2001414">McMurry et al</a>). Jane’s identifier at B Corp changed over time from <code class="language-plaintext highlighter-rouge">CH4TW1N</code> to <code class="language-plaintext highlighter-rouge">3L1Z4PM</code>, so it was not stable. An entity is stable if the entity picked out by an identifier does not change over time (<a href="https://doi.org/10.1371/journal.pbio.2001414">McMurry et al</a>). If, after Jane left B Corp, her <code class="language-plaintext highlighter-rouge">CH4TW1N</code> identifier was reassigned to Julia, then it is not stable. In other words, <em>an identifier’s uniqueness and unambiguousness must persist over time</em>.</p> <p>These properties of uniqueness, unambiguity, identifier stability, and entity stability can only be enforced if the UIDs exist within a system. Theoretically, this system would contain every possible UID, whether it is currently mapped to an entity or not. In this system, a UID could exist in one of three possible states: not yet assigned to an entity, currently assigned to a single entity, or retired (was assigned to an entity, which for some reason was removed from the system). A UID can only travel one way along this path - it cannot go backwards from being removed from the system to being assigned to entity. In this system, a UID isn’t really created or deleted, merely assigned. And <em>a UID cannot be reassigned</em>, because that would result in the entire system failing to meet the required properties of unambiguity and identifier stability.</p> <h2 id="how-is-a-uid-created">How is a UID created?</h2> <p>The fact that a UID must exist within a system of all possible UIDs implies that there are a finite number of possible UIDs within the system - and furthermore, that UIDs must obey certain rules.</p> <p>When a system is created in order to record information about entities (which will have UIDs), the set of all possible UIDs must be defined. In practical terms, this means that a UID can be defined by a regular expression; in linguistic terms, this means that a UID must be describable by a formal grammar.</p> <p>For example, let’s say that B Corp’s system defines a UID as a string of alphanumeric character of length 7. There are 26 letters and 10 digits, and 36^7 is 78,364,164,096. This system of UIDs can identify over 78 billion entities - more than sufficient. Most of these UIDs will never be assigned, and thus never need to enter the database. They will never leave the first stage. Some UIDs will be used to identify employees, and thus enter the second stage. The UID will be entered into a database and be assigned attributes with specific values. Some of these UIDs may be retired - for example, if an employee passes away. However, these retired UIDs must never be used again - which means that the physical system must still keep track of them, if only to prevent their reassignment.</p> <p>How these UIDs are actually generated is not an issue, so long as they follow these simple rules: <em>they must be formed from a formal grammar’s production rules, and once assigned to an entity they must never be reassigned</em>.</p> <h2 id="the-question-of-meaning">The question of meaning</h2> <p>It is generally regarded as bad practice to embed meaning within UIDs. When meaning is embedded in a UID, it may become easy to confuse a UID with an attribute. However, while a UID’s value could be considered an attribute of the entity, the UID’s purpose is to stand in for the entity itself - and thus is not an attribute. There is one fundamental distinction between UIDs and attributes: while an attribute’s value may change, a UID may not. Thus, if a UID’s value is based on an attribute’s value, and that attribute’s value changes, confusion may ensue. The UID cannot be changed, or the entire UID system will be invalidated. But a person looking at the UID may make the wrong assumption. Suppose, for example, that the first character ‘C’ in Jane’s UID means that she is a level C employee. But Jane recently got promoted to level B. Her UID cannot be changed and still be valid, but her UID also incorrectly implies that she is a level C employee.</p> <p>Encoding meaning in a UID is dangerous - but is it invalid? Even though someone might make the wrong assumption by only looking at Jane’s UID, so long as the UID remains unique, unambiguous, and stable over time, it is still a valid UID. Rather than a person making an erroneous assumption, the reverse should be true - individuals must disassociate meaning from the UID since it cannot be guaranteed to be correct. As <a href="https://doi.org/10.1371/journal.pbio.2001414">McMurry et al</a> recommend, “Meaning should only be embedded if it is indisputable, unchangeable and also useful to the data consumer.”</p> <h2 id="uids-can-only-be-unique-within-a-local-context">UIDs can only be unique within a local context</h2> <p>When a UID system is created, it is usually created to work within a specific context - a company, a university, a government database, etc. Outside of the system, a UID’s uniqueness cannot be guaranteed. However, data systems frequently need to be integrated. And so this system, this context, needs to be defined. This is frequently accomplished by assigning the context itself to a unique identifier (commonly denoted as a prefix followed by a colon). The prefix designates which system a UID belongs to, and thus becomes a part of the identifier itself. Together, all of the contexts and their prefixes form a new system - a new context that is the union of all sub-contexts contained within. And so, the prefix becomes a part of this new system’s UID formal grammar.</p> <p>If the prefix is to become part of the UID, then it too must follow the rules outlined thus far: to be unambiguous (one prefix designates exactly one context), to be unique (a context has exactly one prefix), and to be stable (prefixes do not change over time or refer to different contexts over time). This stability over time is what necessitates the use of prefixes - for even if the local UIDs happen to still be unique and unambiguous in the merged system, there is no guarantee that this will still be the case for future states of the system, as each local UID’s uniqueness is only guaranteed within its local system. Whenever one system is merged with another, namespaces and prefixes must be designated, or the identifier cannot qualify as a unique identifier.</p> <p>Unique context identifiers can ensure the new UID system is unambiguous (each UID picks out exactly one entity); however, ensuring that the new UID system is unique is more complicated. For example, suppose B Corp and F Corp are both acquired by L Corp, which combines all employee UIDs into one system using context identifiers. Suppose B Corp’s prefix is <code class="language-plaintext highlighter-rouge">B</code> and F Corp’s prefix is <code class="language-plaintext highlighter-rouge">F</code>. Suddenly, we have a problem. <code class="language-plaintext highlighter-rouge">B:CH4TW1N</code> and <code class="language-plaintext highlighter-rouge">F:W4TCH3R</code> both refer to Jane, and so the entire UID system no longer fulfills the uniqueness requirement.</p> <p>To solve this problem, L Corp should find the combination of stored attributes which can uniquely identify a person. For example, B Corp and F Corp will likely store attributes such as her first name, last name, and birthdate. Together, these attributes may uniquely identify an employee (though there is no guarantee). Or they may have stored other attributes for security purposes, such as fingerprints or a retinal scan. These are much more likely to guarantee uniqueness. Regardless, having a a combination of attributes that can uniquely identify an entity can help a system enforce its UID uniqueness. In database terms, this is known as a compound primary key. It’s also possible that a single attribute may uniquely identify Jane, such as her social security number - a UID from a much broader system. L Corp can now create a mapping from one context to another. However, this is only the first step in the solution.</p> <p>The real problem is that the two local contexts identify entities of the same type (person), thus creating the danger of overlap (non-uniqueness). It can be generalized that in a UID system that contains multiple contexts, besides the prefix itself being unique, the entity type that the prefix describes must also be unique. This means that in order for L Corp to have a UID system, they must create a formal grammar and then assign a new UID to each employee. L Corp may wish preserve the old B Corp and F Corp UIDs for historical purposes, and so may create mappings between the UID systems, but only by establishing a completely new set of UIDs can L Corp ensure that each employee has an unambiguous and unique identifier.</p> <p>Suppose that a UID system identified multiple types of entities - people, locations, objects, etc. If any one of these entity types overlaps with another UID system, the same process of (1) finding the combination of attributes that can uniquely identify an entity, (2) mapping between the systems, and then using that mapping when (3) creating a completely new UID system must be followed. (This also implies that it is good practice for a local UID system to identify one entity type, but this is not a necessary condition for UIDs.)</p> <p>It is important to note that there is no such thing as a truly global UID - nor is it desirable for there to be a global UID system (though that discussion is outside the scope of this post). For there to be a truly global UID, all entities - all information - would have to exist within a single information system. Even with the existence of the internet, this is not feasible. Therefore, the issue of context identifiers, namespaces, prefixes, and mappings between systems is unavoidable - any definition of a UID must discuss both local identifiers and context identifiers as components of an overall UID.</p> <h2 id="once-again-the-question-of-meaning">Once again, the question of meaning</h2> <p>For local (single context) UIDs, embedding meaning is strongly discouraged (though not disqualifying). However, when context identifiers and prefixes are added to the mix, embedded meaning quickly becomes impossible to escape. Many prefixes are acronyms or short words, describing either the organization that produced the UID or the type of entity that the UID set describes (or a combination of the two). Should meaning be a disqualifying characteristic of UIDs, no non-local UID with a context identifier could be considered a UID - and as I have already established, any definition of UIDs must consider context identifiers as an essential aspect of a UID. Therefore, while opacity is a recommended characteristic for UIDs, it is not a necessary property. So long as the UID still follows the production rules of its formal grammar, any meaning, purposefully embedded or not, is irrelevant.</p> <h2 id="contexts-may-change-over-time-and-other-attributes">Contexts may change over time, and other attributes</h2> <p>Despite the best of intentions, it is inevitable that a UID system will change over time. A UID may need to be reassigned, or the formal grammar may need to change. When this happens, a completely new UID system is created. UIDs cannot be reassigned, and the set of all possible UIDs have already been defined. By definition, should either of these things happen, it necessitates a distinct system and context, and thus a distinct prefix as well.</p> <p>This most frequently happens as a result of versioning. A common convention is to append the version number at the end of the original prefix (again embedding meaning in the context identifier). It is important to document this association, so as to avoid both contexts being used in a larger system (as this would introduce a uniqueness problem), as well as to provide a mapping from the old system to the new.</p> <p>This implies that in addition to context identifiers having a specify entity type (or set) that their local UIDs reference as an attribute, context identifiers also have a specific time period as an attribute. If B Corp changed their production rules (for example, they wish to make their UIDs 5 characters long instead of 7) on January 1, 2018, then the context identifier <code class="language-plaintext highlighter-rouge">bcorp</code> has the attribute of identifying entities of the type person and the attribute of identifying entities prior to 2018. The context identifier <code class="language-plaintext highlighter-rouge">bcorp_v2</code> has the attribute of identifying entities during and after 2018. Another property of context identifiers is the formal grammar used to generate all local UIDs. If this set of UIDs are stored on the web, another attribute of the context identifier may be its web address (URL).</p> <p>However, it is important to distinguish between a context’s attributes and a context’s identifier. An online location is an attribute, because it is not guaranteed to be stable over time. Within the semantic web community, a web address (URL) is often treated as a unique identifier. This is erroneous, as web addresses have the potential to change from one moment to the next. For a web address to be a UID, the entire system would have to be created anew every second. Perhaps this is feasible - for the web’s system to incorporate a timestamp into each context identifier, but it is certainly not practical or desirable. Furthermore, the semantic web community does not argue that this is the case - and so, we are left with the conclusion that web addresses (URLs) are not UIDs, both because they are not stable over time, nor can uniqueness be guaranteed (there is nothing restricting me from copying one webpage exactly at a different web address). I will repeat my point: location is an attribute, not a unique identifier.</p> <h2 id="the-issue-of-identity">The issue of identity</h2> <p>There is a larger issue at play here, which I will touch on only briefly - the issue of identity. This is absolutely core to the concept of unique identifiers, as each UID must pick out an entity with a distinct identity. However, it is generally accepted that entities may change - Jane can dye her hair blonde, change employers, move to a new location… even change her name. But you would not consider blonde Eliza of P Corp to be a different person. You could argue that she still has the same fingerprints, the same DNA, but even these can change over time. Eliza and Jane are still the same person. When it comes to physical entities like people, identity is fairly easy to grasp, if hard to define. However, identity is not nearly so easily traced when it comes to imaginary entities - countries, corporations, books, etc. When I say imaginary entities, I mean those things that would not exist without people to think them up. A tiger is a tiger, whether human beings ever evolved from great apes or not. But a corporation only really exists in society’s collective consciousness. It may be described on paper, have physical offices, and pay employees, but the moment everybody stops believing that the corporation exists, it will cease to exist as an entity (Yuval Noah Harari explores this concept in <a href="https://www.ynharari.com/book/sapiens/">“Sapiens”</a>). For these types of entities, identity is much harder to trace. What if the corporation changes its name? What if it fires all of its employees, sells all of its offices, and finds new ones? What if it sells a different product? Is it still the same corporation? What is the line that an entity must cross in order to assume a new identity, and thus a new UID? These are questions that must still be considered in order to have a full understanding of unique identifiers - for the meaning of the entity that a UID identifies is essential to the meaning of the UID itself.</p> <h2 id="key-takeaways">Key Takeaways</h2> <p>Definition of a UID:</p> <ol> <li>an inscription produced by a formal grammar</li> <li>refers to exactly 1 entity (unambiguous) at any given time</li> <li>its referred entity has exactly one UID (unique) at any given time</li> <li>the inscription persists over time (identifier stability)</li> <li>the entity to which it refers persists over time (entity stability)</li> </ol> <p><strong>Remember</strong></p> <ul> <li> <p>A UID may be decomposed into a context identifier and a local identifier. In this case, all context identifiers must also follow this definition, wherein the entity referred to is the set of local identifiers.</p> </li> <li> <p>When a local identifier violates any of the rules in the definition, a new context is created and a new context identifier must be defined.</p> </li> <li> <p>Opacity (lack of inherent or inferred meaning), while highly recommended for UIDs, is not necessary.</p> </li> </ul> <h2 id="citations">Citations</h2> <p>McMurry JA, Juty N, Blomberg N, Burdett T, Conlin T, Conte N, et al. (2017) Identifiers for the 21st century: How to design, provision, and reuse persistent identifiers to maximize utility and impact of life science data. PLoS Biol 15(6): e2001414. https://doi.org/10.1371/journal.pbio.2001414</p> <p>Harry Halpin. (2011) Sense and Reference on the Web. Minds Mach. 21, 2 (May 2011), 153-178. http://dx.doi.org/10.1007/s11023-011-9230-6</p>]]></content><author><name></name></author><category term="MSLIS"/><category term="musings"/><category term="essays"/><category term="data"/><summary type="html"><![CDATA[a conceptual analysis]]></summary></entry></feed>